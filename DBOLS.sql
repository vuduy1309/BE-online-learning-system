-- MySQL dump 10.13  Distrib 8.0.42, for Win64 (x86_64)
--
-- Host: localhost    Database: managecourseonline
-- ------------------------------------------------------
-- Server version	8.0.42

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!50503 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `answeroptions`
--

DROP TABLE IF EXISTS `answeroptions`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `answeroptions` (
  `OptionID` int NOT NULL AUTO_INCREMENT,
  `QuestionID` int DEFAULT NULL,
  `Content` varchar(255) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci DEFAULT NULL,
  `IsCorrect` bit(1) DEFAULT NULL,
  PRIMARY KEY (`OptionID`),
  KEY `QuestionID` (`QuestionID`),
  CONSTRAINT `answeroptions_ibfk_1` FOREIGN KEY (`QuestionID`) REFERENCES `questions` (`QuestionID`)
) ENGINE=InnoDB AUTO_INCREMENT=616 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `answeroptions`
--

LOCK TABLES `answeroptions` WRITE;
/*!40000 ALTER TABLE `answeroptions` DISABLE KEYS */;
INSERT INTO `answeroptions` VALUES (31,16,'Library',_binary ''),(32,16,'Framework',_binary '\0'),(33,16,'Database',_binary '\0'),(34,17,'JavaScript + XML',_binary ''),(35,17,'Java + HTML',_binary '\0'),(60,24,'abc',_binary ''),(61,24,'dgfd',_binary '\0'),(62,24,'ádsad',_binary '\0'),(63,24,'fgdg',_binary '\0'),(64,25,'dsffsd',_binary ''),(65,25,'fdsf',_binary '\0'),(66,25,'fdsfds',_binary '\0'),(67,25,'ưew',_binary '\0'),(68,26,'qưedqw',_binary ''),(69,26,'vfdbd',_binary '\0'),(70,26,'bgf',_binary '\0'),(71,26,'cấdcs',_binary '\0'),(72,27,'123',_binary ''),(73,27,'ádasd',_binary '\0'),(74,27,'fdsads',_binary ''),(75,27,'fgdbgd',_binary '\0'),(76,38,'Building single-page applications',_binary ''),(77,38,'Database management',_binary '\0'),(78,38,'Server-side scripting',_binary '\0'),(79,38,'Image processing',_binary '\0'),(80,39,'Facebook',_binary '\0'),(81,39,'Google',_binary ''),(82,39,'Microsoft',_binary '\0'),(83,39,'Apple',_binary '\0'),(84,40,'JavaScript',_binary '\0'),(85,40,'TypeScript',_binary ''),(86,40,'Python',_binary '\0'),(87,40,'Java',_binary '\0'),(88,41,'Easy learning curve',_binary ''),(89,41,'Large bundle size',_binary '\0'),(90,41,'Complex syntax',_binary '\0'),(91,41,'Poor documentation',_binary '\0'),(92,42,'Options API',_binary '\0'),(93,42,'Composition API',_binary ''),(94,42,'Reactive API',_binary '\0'),(95,42,'Template API',_binary '\0'),(96,43,'Relational',_binary '\0'),(97,43,'NoSQL Document',_binary ''),(98,43,'Graph',_binary '\0'),(99,43,'Key-Value',_binary '\0'),(100,44,'XML',_binary '\0'),(101,44,'JSON/BSON',_binary ''),(102,44,'CSV',_binary '\0'),(103,44,'Plain Text',_binary '\0'),(104,45,'123',_binary ''),(105,45,'879',_binary '\0'),(106,45,'546',_binary ''),(107,45,'234',_binary '\0'),(400,100,'HyperText Markup Language',_binary ''),(401,100,'High Tech Modern Language',_binary '\0'),(402,100,'Home Tool Markup Language',_binary '\0'),(403,100,'Hyperlink and Text Markup Language',_binary '\0'),(404,101,'CSS',_binary ''),(405,101,'JavaScript',_binary '\0'),(406,101,'HTML',_binary '\0'),(407,101,'PHP',_binary '\0'),(408,102,'JavaScript',_binary ''),(409,102,'HTML',_binary '\0'),(410,102,'CSS',_binary '\0'),(411,102,'Python',_binary '\0'),(412,103,'<p>',_binary ''),(413,103,'<paragraph>',_binary '\0'),(414,103,'<text>',_binary '\0'),(415,103,'<para>',_binary '\0'),(416,104,'<a>',_binary ''),(417,104,'<link>',_binary '\0'),(418,104,'<href>',_binary '\0'),(419,104,'<url>',_binary '\0'),(420,105,'<h1>',_binary ''),(421,105,'<h6>',_binary '\0'),(422,105,'<header>',_binary '\0'),(423,105,'<title>',_binary '\0'),(424,106,'#header',_binary ''),(425,106,'.header',_binary '\0'),(426,106,'header',_binary '\0'),(427,106,'*header',_binary '\0'),(428,107,'background-color',_binary ''),(429,107,'bg-color',_binary '\0'),(430,107,'color',_binary '\0'),(431,107,'background',_binary '\0'),(432,108,'Cascading Style Sheets',_binary ''),(433,108,'Computer Style Sheets',_binary '\0'),(434,108,'Creative Style Sheets',_binary '\0'),(435,108,'Colorful Style Sheets',_binary '\0'),(436,109,'var x = 5;',_binary ''),(437,109,'variable x = 5;',_binary '\0'),(438,109,'v x = 5;',_binary '\0'),(439,109,'declare x = 5;',_binary '\0'),(440,110,'push()',_binary ''),(441,110,'add()',_binary '\0'),(442,110,'append()',_binary '\0'),(443,110,'insert()',_binary '\0'),(444,111,'function myFunction() {}',_binary ''),(445,111,'create function myFunction() {}',_binary '\0'),(446,111,'def myFunction() {}',_binary '\0'),(447,111,'function = myFunction() {}',_binary '\0'),(448,112,'Document Object Model',_binary ''),(449,112,'Data Object Management',_binary '\0'),(450,112,'Dynamic Object Model',_binary '\0'),(451,112,'Document Oriented Model',_binary '\0'),(452,113,'getElementById()',_binary ''),(453,113,'getElement()',_binary '\0'),(454,113,'selectById()',_binary '\0'),(455,113,'findElementById()',_binary '\0'),(456,114,'textContent',_binary ''),(457,114,'text',_binary '\0'),(458,114,'content',_binary '\0'),(459,114,'innerText',_binary '\0'),(460,115,'click',_binary ''),(461,115,'onclick',_binary '\0'),(462,115,'mouseclick',_binary '\0'),(463,115,'tap',_binary '\0'),(464,116,'addEventListener()',_binary ''),(465,116,'addEvent()',_binary '\0'),(466,116,'attachEvent()',_binary '\0'),(467,116,'bindEvent()',_binary '\0'),(468,117,'Events propagate from child to parent elements',_binary ''),(469,117,'Events propagate from parent to child elements',_binary '\0'),(470,117,'Events are captured immediately',_binary '\0'),(471,117,'Events are delayed',_binary '\0'),(472,118,'Asynchronous JavaScript and XML',_binary ''),(473,118,'Advanced JavaScript and XML',_binary '\0'),(474,118,'Automatic JavaScript and XML',_binary '\0'),(475,118,'Active JavaScript and XML',_binary '\0'),(476,119,'GET',_binary ''),(477,119,'POST',_binary '\0'),(478,119,'PUT',_binary '\0'),(479,119,'DELETE',_binary '\0'),(480,120,'JSON',_binary ''),(481,120,'XML',_binary '\0'),(482,120,'HTML',_binary '\0'),(483,120,'CSV',_binary '\0'),(484,121,'Design that adapts to different screen sizes',_binary ''),(485,121,'Design that responds to user input',_binary '\0'),(486,121,'Design that changes colors',_binary '\0'),(487,121,'Design that loads quickly',_binary '\0'),(488,122,'vw',_binary ''),(489,122,'px',_binary '\0'),(490,122,'em',_binary '\0'),(491,122,'pt',_binary '\0'),(492,123,'Apply different styles for different devices',_binary ''),(493,123,'Query database information',_binary '\0'),(494,123,'Handle user media uploads',_binary '\0'),(495,123,'Optimize media files',_binary '\0'),(496,124,'A CSS framework for responsive design',_binary ''),(497,124,'A JavaScript library',_binary '\0'),(498,124,'A database management system',_binary '\0'),(499,124,'A web server',_binary '\0'),(500,125,'container',_binary ''),(501,125,'wrapper',_binary '\0'),(502,125,'box',_binary '\0'),(503,125,'content',_binary '\0'),(504,126,'12',_binary ''),(505,126,'10',_binary '\0'),(506,126,'16',_binary '\0'),(507,126,'24',_binary '\0'),(508,127,'A JavaScript library for DOM manipulation',_binary ''),(509,127,'A CSS framework',_binary '\0'),(510,127,'A web browser',_binary '\0'),(511,127,'A database',_binary '\0'),(512,128,'$',_binary ''),(513,128,'#',_binary '\0'),(514,128,'@',_binary '\0'),(515,128,'&',_binary '\0'),(516,129,'$(\"p\")',_binary ''),(517,129,'$(\"paragraph\")',_binary '\0'),(518,129,'$(\"#p\")',_binary '\0'),(519,129,'$(\".p\")',_binary '\0'),(520,130,'A distributed version control system',_binary ''),(521,130,'A web development framework',_binary '\0'),(522,130,'A database management system',_binary '\0'),(523,130,'A text editor',_binary '\0'),(524,131,'git init',_binary ''),(525,131,'git start',_binary '\0'),(526,131,'git create',_binary '\0'),(527,131,'git new',_binary '\0'),(528,132,'Saves changes to the repository',_binary ''),(529,132,'Uploads files to server',_binary '\0'),(530,132,'Downloads files from server',_binary '\0'),(531,132,'Deletes files',_binary '\0'),(532,133,'A web-based hosting service for Git repositories',_binary ''),(533,133,'A text editor',_binary '\0'),(534,133,'A database service',_binary '\0'),(535,133,'A web browser',_binary '\0'),(536,134,'A request to merge changes into a repository',_binary ''),(537,134,'A request to download files',_binary '\0'),(538,134,'A request to delete files',_binary '\0'),(539,134,'A request to create new repository',_binary '\0'),(540,135,'git push',_binary ''),(541,135,'git upload',_binary '\0'),(542,135,'git send',_binary '\0'),(543,135,'git sync',_binary '\0'),(544,136,'Testing individual components in isolation',_binary ''),(545,136,'Testing the entire application',_binary '\0'),(546,136,'Testing user interface',_binary '\0'),(547,136,'Testing database connections',_binary '\0'),(548,137,'End-to-end testing',_binary ''),(549,137,'Unit testing',_binary '\0'),(550,137,'Integration testing',_binary '\0'),(551,137,'Component testing',_binary '\0'),(552,138,'Writing tests before writing code',_binary ''),(553,138,'Writing tests after writing code',_binary '\0'),(554,138,'Testing driven by user requirements',_binary '\0'),(555,138,'Testing driven by time constraints',_binary '\0'),(556,139,'The process of finding and fixing errors in code',_binary ''),(557,139,'The process of writing code',_binary '\0'),(558,139,'The process of testing code',_binary '\0'),(559,139,'The process of deploying code',_binary '\0'),(560,140,'Developer Tools (DevTools)',_binary ''),(561,140,'Console',_binary '\0'),(562,140,'Inspector',_binary '\0'),(563,140,'Debugger',_binary '\0'),(564,141,'A point where execution pauses for inspection',_binary ''),(565,141,'A point where code breaks permanently',_binary '\0'),(566,141,'A point where code executes faster',_binary '\0'),(567,141,'A point where code is optimized',_binary '\0'),(568,142,'Development and Operations',_binary ''),(569,142,'Design and Operations',_binary '\0'),(570,142,'Development and Optimization',_binary '\0'),(571,142,'Deploy and Operate',_binary '\0'),(572,143,'Improve collaboration between development and operations teams',_binary ''),(573,143,'Reduce development costs',_binary '\0'),(574,143,'Increase code complexity',_binary '\0'),(575,143,'Eliminate testing phases',_binary '\0'),(576,144,'Continuous Integration',_binary ''),(577,144,'Code Review',_binary '\0'),(578,144,'Manual Testing',_binary '\0'),(579,144,'Documentation',_binary '\0'),(580,145,'Continuous Integration/Continuous Deployment',_binary ''),(581,145,'Code Integration/Code Deployment',_binary '\0'),(582,145,'Continuous Improvement/Continuous Development',_binary '\0'),(583,145,'Central Integration/Central Deployment',_binary '\0'),(584,146,'Ensure code quality and catch bugs early',_binary ''),(585,146,'Speed up development process',_binary '\0'),(586,146,'Reduce server costs',_binary '\0'),(587,146,'Improve user interface',_binary '\0'),(588,147,'Jenkins',_binary ''),(589,147,'Photoshop',_binary '\0'),(590,147,'Excel',_binary '\0'),(591,147,'PowerPoint',_binary '\0'),(592,148,'Managing and coordinating containerized applications',_binary ''),(593,148,'Creating container images',_binary '\0'),(594,148,'Installing Docker',_binary '\0'),(595,148,'Writing Dockerfiles',_binary '\0'),(596,149,'Kubernetes',_binary ''),(597,149,'Docker',_binary '\0'),(598,149,'Maven',_binary '\0'),(599,149,'Gradle',_binary '\0'),(600,150,'The smallest deployable unit in Kubernetes',_binary ''),(601,150,'A container image',_binary '\0'),(602,150,'A Docker container',_binary '\0'),(603,150,'A virtual machine',_binary '\0'),(604,151,'A method of teaching computers to learn from data',_binary ''),(605,151,'A type of computer hardware',_binary '\0'),(606,151,'A programming language',_binary '\0'),(607,151,'A database system',_binary '\0'),(608,152,'Supervised learning',_binary ''),(609,152,'Unsupervised learning',_binary '\0'),(610,152,'Reinforcement learning',_binary '\0'),(611,152,'Deep learning',_binary '\0'),(612,153,'A computing system inspired by biological neural networks',_binary ''),(613,153,'A type of database',_binary '\0'),(614,153,'A web framework',_binary '\0'),(615,153,'A testing tool',_binary '\0');
/*!40000 ALTER TABLE `answeroptions` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `cartitems`
--

DROP TABLE IF EXISTS `cartitems`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `cartitems` (
  `CartItemID` int NOT NULL AUTO_INCREMENT,
  `CartID` int DEFAULT NULL,
  `CourseID` int DEFAULT NULL,
  `Price` decimal(10,2) DEFAULT NULL,
  PRIMARY KEY (`CartItemID`),
  KEY `CartID` (`CartID`),
  KEY `CourseID` (`CourseID`),
  CONSTRAINT `cartitems_ibfk_1` FOREIGN KEY (`CartID`) REFERENCES `carts` (`CartID`),
  CONSTRAINT `cartitems_ibfk_2` FOREIGN KEY (`CourseID`) REFERENCES `courses` (`CourseID`)
) ENGINE=InnoDB AUTO_INCREMENT=56 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `cartitems`
--

LOCK TABLES `cartitems` WRITE;
/*!40000 ALTER TABLE `cartitems` DISABLE KEYS */;
INSERT INTO `cartitems` VALUES (1,1,1,799.00),(2,2,9,1234.00),(3,4,9,1234.00),(5,2,1,799.00),(6,5,9,1234.00),(7,2,3,999.00),(8,6,9,1234.00),(9,7,9,1234.00),(10,8,9,1234.00),(11,9,9,1234.00),(12,10,9,1234.00),(13,11,9,1234.00),(14,12,9,1234.00),(15,13,9,1234.00),(17,14,3,999.00),(18,15,9,1234.00),(19,16,9,1234.00),(21,14,9,1234.00),(22,18,9,1234.00),(24,18,7,5000.00),(26,18,4,890.00),(27,20,9,1234.00),(28,20,36,54565.00),(29,20,1,799.00),(30,21,1,799.00),(32,23,3,999.00),(33,24,4,890.00),(34,25,4,890.00),(36,27,6,1299.00),(37,28,3,999.00),(38,29,48,1399.00),(39,29,44,899.00),(40,30,44,899.00),(41,31,44,899.00),(42,32,5,490.00),(43,33,5,490.00),(47,35,44,899.00),(48,36,44,899.00),(50,37,44,899.00),(51,20,3,999.00),(53,39,49,999.00),(55,34,47,1199.00);
/*!40000 ALTER TABLE `cartitems` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `carts`
--

DROP TABLE IF EXISTS `carts`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `carts` (
  `CartID` int NOT NULL AUTO_INCREMENT,
  `UserID` int DEFAULT NULL,
  `Status` varchar(20) DEFAULT NULL,
  `TotalPrice` decimal(10,2) DEFAULT NULL,
  `CreateAt` datetime DEFAULT NULL,
  PRIMARY KEY (`CartID`),
  KEY `fk_carts_user` (`UserID`),
  CONSTRAINT `fk_carts_user` FOREIGN KEY (`UserID`) REFERENCES `users` (`UserID`)
) ENGINE=InnoDB AUTO_INCREMENT=40 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `carts`
--

LOCK TABLES `carts` WRITE;
/*!40000 ALTER TABLE `carts` DISABLE KEYS */;
INSERT INTO `carts` VALUES (1,4,'checked_out',799.00,'2025-05-18 17:52:45'),(2,2,'checked_out',8032.00,'2025-05-18 17:53:43'),(4,2,'paid',1234.00,'2025-05-18 18:05:27'),(5,2,'paid',1234.00,'2025-05-18 18:57:23'),(6,2,'checked_out',1234.00,'2025-05-18 22:18:57'),(7,2,'paid',1234.00,'2025-05-18 22:19:26'),(8,2,'paid',1234.00,'2025-05-18 22:46:11'),(9,2,'checked_out',1234.00,'2025-05-18 22:46:13'),(10,2,'buy_now',1234.00,'2025-05-19 00:28:09'),(11,2,'buy_now',1234.00,'2025-05-19 00:28:29'),(12,2,'buy_now',1234.00,'2025-05-19 00:30:01'),(13,2,'buy_now',1234.00,'2025-05-19 00:34:55'),(14,2,'checked_out',7233.00,'2025-05-19 00:35:02'),(15,2,'buy_now',1234.00,'2025-05-19 00:35:17'),(16,2,'buy_now',1234.00,'2025-05-19 00:38:14'),(17,2,'buy_now',5000.00,'2025-05-19 00:38:22'),(18,2,'checked_out',12124.00,'2025-05-19 00:44:10'),(19,2,'buy_now',5000.00,'2025-05-19 01:12:07'),(20,2,'pending',57597.00,'2025-05-19 05:48:48'),(21,5,'checked_out',799.00,'2025-05-23 02:34:07'),(22,5,'checked_out',5000.00,'2025-05-23 02:34:14'),(23,5,'checked_out',999.00,'2025-05-23 02:34:17'),(24,5,'checked_out',890.00,'2025-05-23 02:34:25'),(25,5,'checked_out',890.00,'2025-05-23 07:05:42'),(26,5,'checked_out',1299.00,'2025-05-23 07:08:31'),(27,5,'checked_out',1299.00,'2025-05-23 19:21:58'),(28,5,'checked_out',999.00,'2025-05-23 19:42:57'),(29,5,'checked_out',2298.00,'2025-05-23 19:43:08'),(30,5,'checked_out',899.00,'2025-05-23 21:15:29'),(31,5,'checked_out',899.00,'2025-05-23 21:15:35'),(32,2,'checked_out',490.00,'2025-05-24 04:02:57'),(33,5,'checked_out',490.00,'2025-05-24 04:04:13'),(34,5,'pending',1199.00,'2025-05-24 04:07:55'),(35,5,'checked_out',899.00,'2025-05-24 13:22:31'),(36,5,'buy_now',899.00,'2025-05-24 13:22:51'),(37,4,'pending',899.00,'2025-05-25 06:00:37'),(38,3,'pending',0.00,'2025-05-26 12:34:14'),(39,5,'buy_now',999.00,'2025-05-26 22:15:35');
/*!40000 ALTER TABLE `carts` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `chatrooms`
--

DROP TABLE IF EXISTS `chatrooms`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `chatrooms` (
  `ChatRoomID` int NOT NULL AUTO_INCREMENT,
  `UserID` int DEFAULT NULL,
  `InstructorID` int DEFAULT NULL,
  `CreatedAt` datetime DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`ChatRoomID`),
  KEY `UserID` (`UserID`),
  KEY `InstructorID` (`InstructorID`),
  CONSTRAINT `chatrooms_ibfk_1` FOREIGN KEY (`UserID`) REFERENCES `users` (`UserID`),
  CONSTRAINT `chatrooms_ibfk_2` FOREIGN KEY (`InstructorID`) REFERENCES `users` (`UserID`)
) ENGINE=InnoDB AUTO_INCREMENT=11 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `chatrooms`
--

LOCK TABLES `chatrooms` WRITE;
/*!40000 ALTER TABLE `chatrooms` DISABLE KEYS */;
INSERT INTO `chatrooms` VALUES (1,5,3,'2025-05-26 00:53:36'),(2,5,4,'2025-05-26 01:10:36'),(3,5,2,'2025-05-26 03:13:11'),(5,3,1,'2025-05-26 04:20:03'),(6,3,4,'2025-05-26 04:21:07'),(7,3,2,'2025-05-26 04:22:54'),(8,6,3,'2025-05-26 04:29:53'),(9,5,6,'2025-05-26 12:31:14'),(10,5,1,'2025-05-27 07:42:12');
/*!40000 ALTER TABLE `chatrooms` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `coursefeedback`
--

DROP TABLE IF EXISTS `coursefeedback`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `coursefeedback` (
  `FeedbackID` int NOT NULL AUTO_INCREMENT,
  `UserID` int DEFAULT NULL,
  `CourseID` int DEFAULT NULL,
  `Rating` int DEFAULT NULL,
  `Comment` text,
  `ReviewDate` datetime DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`FeedbackID`),
  KEY `UserID` (`UserID`),
  KEY `CourseID` (`CourseID`),
  CONSTRAINT `coursefeedback_ibfk_1` FOREIGN KEY (`UserID`) REFERENCES `users` (`UserID`),
  CONSTRAINT `coursefeedback_ibfk_2` FOREIGN KEY (`CourseID`) REFERENCES `courses` (`CourseID`),
  CONSTRAINT `coursefeedback_chk_1` CHECK ((`Rating` between 1 and 5))
) ENGINE=InnoDB AUTO_INCREMENT=9 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `coursefeedback`
--

LOCK TABLES `coursefeedback` WRITE;
/*!40000 ALTER TABLE `coursefeedback` DISABLE KEYS */;
INSERT INTO `coursefeedback` VALUES (1,3,1,5,'Khóa học cơ bản rất dễ hiểu!','2025-05-17 21:11:28'),(2,3,2,4,'Rất hữu ích nhưng có vài phần khó hiểu.','2025-05-17 21:11:28'),(3,3,3,5,'Học Node.js rất chi tiết.','2025-05-17 21:11:28'),(4,3,4,4,'Python từ cơ bản đến nâng cao rất tốt.','2025-05-17 21:11:28'),(5,3,5,3,'Phần SQL hơi khô khan.','2025-05-17 21:11:28'),(6,3,6,5,'Spring Boot rất thực tế cho dự án.','2025-05-17 21:11:28'),(8,5,4,4,'123','2025-05-27 06:49:43');
/*!40000 ALTER TABLE `coursefeedback` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `courseinstructors`
--

DROP TABLE IF EXISTS `courseinstructors`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `courseinstructors` (
  `CourseID` int NOT NULL,
  `InstructorID` int NOT NULL,
  PRIMARY KEY (`CourseID`,`InstructorID`),
  KEY `courseinstructors_ibfk_2` (`InstructorID`),
  CONSTRAINT `courseinstructors_ibfk_1` FOREIGN KEY (`CourseID`) REFERENCES `courses` (`CourseID`),
  CONSTRAINT `courseinstructors_ibfk_2` FOREIGN KEY (`InstructorID`) REFERENCES `users` (`UserID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `courseinstructors`
--

LOCK TABLES `courseinstructors` WRITE;
/*!40000 ALTER TABLE `courseinstructors` DISABLE KEYS */;
INSERT INTO `courseinstructors` VALUES (1,3),(2,3),(6,3),(11,3),(34,3),(35,3),(36,3),(38,3),(42,3),(44,3),(45,3),(46,3),(47,3),(48,3),(49,3),(50,3),(51,3),(3,4),(4,4),(5,4),(37,4);
/*!40000 ALTER TABLE `courseinstructors` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `courseprogress`
--

DROP TABLE IF EXISTS `courseprogress`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `courseprogress` (
  `ProgressID` int NOT NULL AUTO_INCREMENT,
  `EnrollmentID` int DEFAULT NULL,
  `LessonID` int DEFAULT NULL,
  `Status` varchar(50) DEFAULT NULL,
  `Duration` int DEFAULT NULL,
  PRIMARY KEY (`ProgressID`),
  KEY `EnrollmentID` (`EnrollmentID`),
  KEY `LessonID` (`LessonID`),
  CONSTRAINT `courseprogress_ibfk_1` FOREIGN KEY (`EnrollmentID`) REFERENCES `enrollments` (`EnrollmentID`),
  CONSTRAINT `courseprogress_ibfk_2` FOREIGN KEY (`LessonID`) REFERENCES `lessons` (`LessonID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `courseprogress`
--

LOCK TABLES `courseprogress` WRITE;
/*!40000 ALTER TABLE `courseprogress` DISABLE KEYS */;
/*!40000 ALTER TABLE `courseprogress` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `courses`
--

DROP TABLE IF EXISTS `courses`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `courses` (
  `CourseID` int NOT NULL AUTO_INCREMENT,
  `Title` varchar(255) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci DEFAULT NULL,
  `Description` text,
  `Price` decimal(10,2) DEFAULT NULL,
  `CreatedAt` datetime DEFAULT CURRENT_TIMESTAMP,
  `ImageURL` text,
  `Status` varchar(20) DEFAULT 'Draft',
  PRIMARY KEY (`CourseID`)
) ENGINE=InnoDB AUTO_INCREMENT=52 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `courses`
--

LOCK TABLES `courses` WRITE;
/*!40000 ALTER TABLE `courses` DISABLE KEYS */;
INSERT INTO `courses` VALUES (1,'Web Development with HTML, CSS, and JavaScript','A foundational course that teaches you how to build modern websites from scratch using HTML, CSS, and JavaScript.',799.00,'2025-05-17 16:13:52','/uploads/courses/course-1748129237997-783703630.png','active'),(3,'Node.js and Express for Backend Development','Learn how to build RESTful APIs using Node.js and Express, with MySQL database integration.',999.00,'2025-05-17 16:13:52','/uploads/courses/course-1748129285252-735498656.png','active'),(4,'Python Programming: Beginner to Advanced','A comprehensive Python course covering basics, file handling, OOP, and popular libraries.',890.00,'2025-05-17 16:13:52','/uploads/courses/course-1748129305758-288324623.png','active'),(5,'SQL & MySQL for Beginners','Understand how to write SQL queries, design databases, and work with MySQL in real projects.',490.00,'2025-05-17 16:13:52','/uploads/courses/course-1748129343714-641396680.png','active'),(6,'Java Spring Boot Course','Develop full-stack web applications with Java and Spring Boot, including REST API, JPA, and security.',1299.00,'2025-05-17 16:13:52','/uploads/courses/course-1748129361584-560589717.webp','active'),(11,'Node.js Basics','Learn the basics of Node.js',300.00,'2025-05-19 08:29:33','/uploads/courses/course-1748129387438-40139572.png','active'),(38,'ReactJS Beginner Course','Learn React from scratch',49.99,'2025-05-21 21:02:06','/uploads/courses/course-1748130377437-288816034.webp','active'),(42,'Python Programming Complete Course','Khóa học Python từ cơ bản đến nâng cao, bao gồm các chủ đề từ cú pháp cơ bản đến lập trình hướng đối tượng, xử lý file, và các thư viện phổ biến.',1299.00,'2025-05-23 06:53:30','/uploads/courses/course-1748130362350-723426724.png','active'),(44,'Angular Fundamentals','Learn Angular framework from basics to advanced concepts including components, services, routing, and state management.',899.00,'2025-05-23 19:19:53','/uploads/courses/course-1748130313140-552609699.png','active'),(45,'Vue.js Complete Course','Master Vue.js 3 with Composition API, Vuex, Vue Router, and build modern single-page applications.',749.00,'2025-05-23 19:19:53','/uploads/courses/course-1748132547153-852590026.webp','active'),(46,'MongoDB Database Design','Learn NoSQL database design with MongoDB, including collections, indexing, aggregation, and performance optimization.',599.00,'2025-05-23 19:19:53','/uploads/courses/course-1748132496890-363016258.png','active'),(47,'Docker & Kubernetes','Containerization and orchestration with Docker and Kubernetes for modern application deployment.',1199.00,'2025-05-23 19:19:53','/uploads/courses/course-1748132471501-308584267.png','active'),(48,'Machine Learning with Python','Introduction to machine learning using Python, NumPy, Pandas, Scikit-learn, and TensorFlow.',1399.00,'2025-05-23 19:19:53','/uploads/courses/course-1748132457325-307744038.png','active'),(49,'Flutter Mobile Development','Build cross-platform mobile apps with Flutter and Dart programming language.',999.00,'2025-05-23 19:19:53','/uploads/courses/course-1748132410918-448767917.jpg','active'),(50,'AWS Cloud Fundamentals','Learn Amazon Web Services including EC2, S3, RDS, Lambda, and cloud architecture best practices.',1099.00,'2025-05-23 19:19:53','/uploads/courses/course-1748132392004-144668353.png','active'),(51,'GraphQL API Development','Build efficient APIs with GraphQL, including schema design, resolvers, and integration with databases.',799.00,'2025-05-23 19:19:53','/uploads/courses/course-1748132365446-458238545.png','active');
/*!40000 ALTER TABLE `courses` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `enrollments`
--

DROP TABLE IF EXISTS `enrollments`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `enrollments` (
  `EnrollmentID` int NOT NULL AUTO_INCREMENT,
  `UserID` int DEFAULT NULL,
  `CourseID` int DEFAULT NULL,
  `EnrollDate` datetime DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`EnrollmentID`),
  KEY `UserID` (`UserID`),
  KEY `CourseID` (`CourseID`),
  CONSTRAINT `enrollments_ibfk_1` FOREIGN KEY (`UserID`) REFERENCES `users` (`UserID`),
  CONSTRAINT `enrollments_ibfk_2` FOREIGN KEY (`CourseID`) REFERENCES `courses` (`CourseID`)
) ENGINE=InnoDB AUTO_INCREMENT=15 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `enrollments`
--

LOCK TABLES `enrollments` WRITE;
/*!40000 ALTER TABLE `enrollments` DISABLE KEYS */;
INSERT INTO `enrollments` VALUES (1,5,4,'2025-05-23 03:47:45'),(3,5,3,'2025-05-23 04:12:12'),(5,5,1,'2025-05-23 04:12:14'),(10,5,42,'2025-05-23 07:16:19'),(11,5,6,'2025-05-23 19:22:15'),(12,5,44,'2025-05-23 21:16:44'),(14,5,5,'2025-05-24 04:04:34');
/*!40000 ALTER TABLE `enrollments` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `invoices`
--

DROP TABLE IF EXISTS `invoices`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `invoices` (
  `InvoiceID` int NOT NULL AUTO_INCREMENT,
  `OrderID` int DEFAULT NULL,
  `InvoiceDate` datetime DEFAULT CURRENT_TIMESTAMP,
  `PaymentMethod` varchar(50) DEFAULT NULL,
  PRIMARY KEY (`InvoiceID`),
  UNIQUE KEY `OrderID` (`OrderID`),
  CONSTRAINT `invoices_ibfk_1` FOREIGN KEY (`OrderID`) REFERENCES `orders` (`OrderID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `invoices`
--

LOCK TABLES `invoices` WRITE;
/*!40000 ALTER TABLE `invoices` DISABLE KEYS */;
/*!40000 ALTER TABLE `invoices` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `lessonmaterials`
--

DROP TABLE IF EXISTS `lessonmaterials`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `lessonmaterials` (
  `MaterialID` int NOT NULL AUTO_INCREMENT,
  `LessonID` int DEFAULT NULL,
  `MaterialType` varchar(50) DEFAULT NULL,
  `URL` text,
  PRIMARY KEY (`MaterialID`),
  KEY `LessonID` (`LessonID`),
  CONSTRAINT `lessonmaterials_ibfk_1` FOREIGN KEY (`LessonID`) REFERENCES `lessons` (`LessonID`)
) ENGINE=InnoDB AUTO_INCREMENT=138 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `lessonmaterials`
--

LOCK TABLES `lessonmaterials` WRITE;
/*!40000 ALTER TABLE `lessonmaterials` DISABLE KEYS */;
INSERT INTO `lessonmaterials` VALUES (1,1,'Video','https://example.com/videos/html-intro.mp4'),(2,1,'Slide','https://example.com/slides/html-intro.pdf'),(3,2,'Video','https://example.com/videos/css-basics.mp4'),(8,7,'Video','https://example.com/videos/nodejs-setup.mp4'),(9,8,'Video','https://example.com/videos/express-routing.mp4'),(10,9,'Video','https://example.com/videos/mysql-integration.mp4'),(11,10,'Video','https://example.com/videos/python-basics.mp4'),(12,11,'Video','https://example.com/videos/functions-modules.mp4'),(13,12,'Video','https://example.com/videos/oop.mp4'),(14,13,'Video','https://example.com/videos/sql-queries.mp4'),(15,14,'Video','https://example.com/videos/db-design.mp4'),(16,15,'Video','https://example.com/videos/mysql-advanced.mp4'),(17,16,'Video','https://example.com/videos/springboot-setup.mp4'),(18,17,'Video','https://example.com/videos/rest-api-spring.mp4'),(19,18,'Video','https://example.com/videos/security-springboot.mp4'),(20,3,'Video','https://chatgpt.com/c/682c7187-edcc-8001-a22a-eb6638e25e31'),(27,7,'Slide','https://example.com/slides/nodejs-setup.pdf'),(28,7,'Exercise','https://example.com/exercises/nodejs-basics.html'),(29,8,'Slide','https://example.com/slides/express-routing.pdf'),(30,8,'Exercise','https://example.com/exercises/express-practice.html'),(31,9,'Slide','https://example.com/slides/mysql-integration.pdf'),(32,9,'Exercise','https://example.com/exercises/database-connection.html'),(33,10,'Slide','https://example.com/slides/python-basics.pdf'),(34,10,'Exercise','https://example.com/exercises/python-fundamentals.html'),(35,11,'Slide','https://example.com/slides/functions-modules.pdf'),(36,11,'Exercise','https://example.com/exercises/function-practice.html'),(37,12,'Slide','https://example.com/slides/oop-python.pdf'),(38,12,'Exercise','https://example.com/exercises/oop-practice.html'),(39,13,'Slide','https://example.com/slides/sql-queries.pdf'),(40,13,'Exercise','https://example.com/exercises/sql-practice.html'),(41,14,'Slide','https://example.com/slides/db-design.pdf'),(42,14,'Exercise','https://example.com/exercises/database-design.html'),(43,15,'Slide','https://example.com/slides/mysql-advanced.pdf'),(44,15,'Exercise','https://example.com/exercises/advanced-mysql.html'),(45,16,'Slide','https://example.com/slides/springboot-setup.pdf'),(46,16,'Exercise','https://example.com/exercises/springboot-basics.html'),(47,17,'Slide','https://example.com/slides/rest-api-spring.pdf'),(48,17,'Exercise','https://example.com/exercises/rest-api-practice.html'),(49,18,'Slide','https://example.com/slides/security-springboot.pdf'),(50,18,'Exercise','https://example.com/exercises/security-practice.html'),(51,39,'Video','https://example.com/videos/angular-intro.mp4'),(52,39,'Slide','https://example.com/slides/angular-basics.pdf'),(53,39,'Exercise','https://example.com/exercises/angular-setup.html'),(57,41,'Video','https://example.com/videos/angular-databinding.mp4'),(58,41,'Slide','https://example.com/slides/data-binding.pdf'),(59,41,'Exercise','https://example.com/exercises/binding-practice.html'),(60,42,'Video','https://example.com/videos/vuejs-basics.mp4'),(61,42,'Slide','https://example.com/slides/vue-fundamentals.pdf'),(62,42,'Exercise','https://example.com/exercises/vue-practice.html'),(63,43,'Video','https://example.com/videos/mongodb-intro.mp4'),(64,43,'Slide','https://example.com/slides/nosql-concepts.pdf'),(65,43,'Exercise','https://example.com/exercises/mongodb-queries.html'),(66,44,'Video','https://example.com/videos/docker-basics.mp4'),(67,44,'Slide','https://example.com/slides/containerization.pdf'),(68,44,'Exercise','https://example.com/exercises/docker-practice.html'),(78,48,'Video','https://example.com/videos/nodejs-installation.mp4'),(79,48,'Slide','https://example.com/slides/nodejs-setup.pdf'),(80,48,'Exercise','https://example.com/exercises/nodejs-install.html'),(81,49,'Video','https://example.com/videos/js-review.mp4'),(82,49,'Slide','https://example.com/slides/javascript-review.pdf'),(83,49,'Exercise','https://example.com/exercises/js-fundamentals.html'),(84,50,'Video','https://example.com/videos/first-server.mp4'),(85,50,'Slide','https://example.com/slides/http-server.pdf'),(86,50,'Exercise','https://example.com/exercises/create-server.html'),(87,51,'Video','https://example.com/videos/react-intro.mp4'),(88,51,'Slide','https://example.com/slides/react-basics.pdf'),(89,51,'Exercise','https://example.com/exercises/react-setup.html'),(90,52,'Video','https://example.com/videos/jsx-components.mp4'),(91,52,'Slide','https://example.com/slides/jsx-guide.pdf'),(92,52,'Exercise','https://example.com/exercises/component-practice.html'),(93,53,'Video','https://example.com/videos/state-props.mp4'),(94,53,'Slide','https://example.com/slides/state-management.pdf'),(95,53,'Exercise','https://example.com/exercises/state-practice.html'),(117,63,'Video','https://example.com/videos/vue-setup.mp4'),(118,63,'Slide','https://example.com/slides/vue-installation.pdf'),(119,63,'Exercise','https://example.com/exercises/vue-first-app.html'),(120,66,'Video','https://example.com/videos/mongodb-install.mp4'),(121,66,'Slide','https://example.com/slides/mongodb-setup.pdf'),(122,66,'Exercise','https://example.com/exercises/mongodb-basics.html'),(123,69,'Video','https://example.com/videos/docker-install.mp4'),(124,69,'Slide','https://example.com/slides/docker-basics.pdf'),(125,69,'Exercise','https://example.com/exercises/docker-hello-world.html'),(126,72,'Video','https://example.com/videos/ml-introduction.mp4'),(127,72,'Slide','https://example.com/slides/machine-learning-basics.pdf'),(128,72,'Exercise','https://example.com/exercises/ml-first-model.html'),(129,75,'Video','https://example.com/videos/flutter-setup.mp4'),(130,75,'Slide','https://example.com/slides/flutter-installation.pdf'),(131,75,'Exercise','https://example.com/exercises/flutter-hello-world.html'),(132,78,'Video','https://example.com/videos/aws-setup.mp4'),(133,78,'Slide','https://example.com/slides/aws-getting-started.pdf'),(134,78,'Exercise','https://example.com/exercises/aws-console.html'),(135,81,'Video','https://example.com/videos/graphql-intro.mp4'),(136,81,'Slide','https://example.com/slides/graphql-basics.pdf'),(137,81,'Exercise','https://example.com/exercises/graphql-queries.html');
/*!40000 ALTER TABLE `lessonmaterials` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `lessons`
--

DROP TABLE IF EXISTS `lessons`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `lessons` (
  `LessonID` int NOT NULL AUTO_INCREMENT,
  `CourseID` int DEFAULT NULL,
  `Title` varchar(255) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci DEFAULT NULL,
  `Introduction` mediumtext,
  `Content` longtext,
  `Example` mediumtext,
  `OrderNumber` int DEFAULT NULL,
  PRIMARY KEY (`LessonID`),
  KEY `CourseID` (`CourseID`),
  CONSTRAINT `lessons_ibfk_1` FOREIGN KEY (`CourseID`) REFERENCES `courses` (`CourseID`)
) ENGINE=InnoDB AUTO_INCREMENT=111 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `lessons`
--

LOCK TABLES `lessons` WRITE;
/*!40000 ALTER TABLE `lessons` DISABLE KEYS */;
INSERT INTO `lessons` VALUES (1,1,'Introduction to HTML','Learn the structure and purpose of HTML in web development.','<h2>What is HTML?</h2>\n<ul>\n  <li>HTML stands for Hyper Text Markup Language</li>\n  <li>HTML is the standard markup language for creating Web pages</li>\n  <li>HTML describes the structure of a Web page</li>\n  <li>HTML consists of a series of elements</li>\n  <li>HTML elements tell the browser how to display the content</li>\n</ul>\n<h2>HTML Page Structure</h2>\n<p>Below is a visualization of an HTML page structure:</p>\n<div class=\"ws-grey\">\n<div class=\"html-structure\">\n&lt;!DOCTYPE html&gt;<br>\n&lt;html&gt;<br>\n&lt;head&gt;<br>\n&lt;title&gt;Page Title&lt;/title&gt;<br>\n&lt;/head&gt;<br>\n&lt;body&gt;<br><br>\n&lt;h1&gt;This is a Heading&lt;/h1&gt;<br>\n&lt;p&gt;This is a paragraph.&lt;/p&gt;<br><br>\n&lt;/body&gt;<br>\n&lt;/html&gt;\n</div>\n</div>\'','<!DOCTYPE html>\n<html>\n  <head><title>My First Page</title></head>\n  <body><h1>Hello World!</h1></body>\n</html>',1),(2,1,'CSS Basics','Understand how CSS styles your HTML content.','<p>CSS (Cascading Style Sheets) lets you control the layout and appearance of your HTML.</p>','h1 {\n  color: blue;\n  font-size: 24px;\n}',2),(3,1,'JavaScript Fundamentals','Get started with programming using JavaScript.','<p>JavaScript adds interactivity and logic to your web pages 3.</p>','console.log(\"Hello, JavaScript!\");',3),(7,3,'Node.js Setup','Set up your Node.js development environment and understand the Node.js runtime.','<h2>Node.js Environment Setup</h2>\n<p>Node.js is a JavaScript runtime built on Chrome\'s V8 JavaScript engine.</p>\n<h3>Installation:</h3>\n<ul>\n  <li>Download from nodejs.org</li>\n  <li>Verify installation with node --version</li>\n  <li>NPM (Node Package Manager) comes bundled</li>\n</ul>\n<h3>Key Features:</h3>\n<ul>\n  <li>Non-blocking I/O operations</li>\n  <li>Event-driven architecture</li>\n  <li>Large ecosystem of packages</li>\n</ul>',NULL,1),(8,3,'Express.js Routing','Learn how to build RESTful APIs using Express.js framework and handle HTTP requests efficiently.','<h2>Express.js Framework</h2><p>Express.js is a minimal and flexible Node.js web application framework that provides a robust set of features for web and mobile applications.</p><h3>Key Features:</h3><ul><li>Fast, unopinionated, minimalist web framework</li><li>Robust routing system</li><li>Middleware support</li><li>Template engine support</li><li>Error handling capabilities</li></ul><h3>HTTP Methods:</h3><p>Express supports all HTTP methods: GET, POST, PUT, DELETE, PATCH</p>','const express = require(\"express\");\nconst app = express();\n\n// GET route\napp.get(\"/api/users\", (req, res) => {\n  res.json({ users: [] });\n});\n\n// POST route\napp.post(\"/api/users\", (req, res) => {\n  const newUser = req.body;\n  res.status(201).json(newUser);\n});\n\napp.listen(3000, () => {\n  console.log(\"Server running on port 3000\");\n});',2),(9,3,'Connecting MySQL','Connect your Node.js application to MySQL database and perform CRUD operations.','<h2>MySQL Integration with Node.js</h2><p>Learn how to connect Node.js applications to MySQL database using mysql2 package.</p><h3>Setup Process:</h3><ul><li>Install mysql2 package</li><li>Create database connection</li><li>Write SQL queries</li><li>Handle database operations</li><li>Error handling and connection pooling</li></ul><h3>Best Practices:</h3><ul><li>Use connection pooling for better performance</li><li>Implement proper error handling</li><li>Use prepared statements to prevent SQL injection</li><li>Close connections properly</li></ul>','const mysql = require(\"mysql2/promise\");\n\n// Create connection pool\nconst pool = mysql.createPool({\n  host: \"localhost\",\n  user: \"username\",\n  password: \"password\",\n  database: \"mydb\",\n  waitForConnections: true,\n  connectionLimit: 10\n});\n\n// Get users\nasync function getUsers() {\n  try {\n    const [rows] = await pool.execute(\"SELECT * FROM users\");\n    return rows;\n  } catch (error) {\n    console.error(\"Database error:\", error);\n    throw error;\n  }\n}',3),(10,4,'Python Basics','Master the fundamentals of Python programming including syntax, variables, and basic operations.','<h2>Python Programming Basics</h2><p>Python is a high-level, interpreted programming language known for its simplicity and readability.</p><h3>Key Features:</h3><ul><li>Simple and readable syntax</li><li>Interpreted language</li><li>Dynamic typing</li><li>Large standard library</li><li>Cross-platform compatibility</li></ul><h3>Python Applications:</h3><ul><li>Web development</li><li>Data analysis and science</li><li>Machine learning and AI</li><li>Automation and scripting</li><li>Desktop applications</li></ul>','# Python basics\nprint(\"Hello, Python!\")\n\n# Variables and data types\nname = \"Alice\"\nage = 25\nheight = 5.6\nis_student = True\n\n# Lists and dictionaries\nfruits = [\"apple\", \"banana\", \"orange\"]\nstudent = {\"name\": \"Bob\", \"grade\": 85}\n\n# Simple function\ndef greet(name):\n    return f\"Hello, {name}!\"\n\nprint(greet(\"World\"))',1),(11,4,'Functions and Modules','This lesson covers the fundamentals and practical applications of the topic.','<h2>Lesson Overview</h2><p>In this comprehensive lesson, you will learn the key concepts and practical skills needed to master this topic. We will cover both theoretical foundations and hands-on examples to ensure you gain a complete understanding.</p><h3>Learning Objectives</h3><ul><li>Understand the core concepts and principles</li><li>Apply knowledge through practical examples</li><li>Develop problem-solving skills</li><li>Build confidence in using these concepts</li></ul>','// Example code or demonstration\nconsole.log(\"This is a sample example\");',2),(12,4,'Object-Oriented Programming','This lesson covers the fundamentals and practical applications of the topic.','<h2>Lesson Overview</h2><p>In this comprehensive lesson, you will learn the key concepts and practical skills needed to master this topic. We will cover both theoretical foundations and hands-on examples to ensure you gain a complete understanding.</p><h3>Learning Objectives</h3><ul><li>Understand the core concepts and principles</li><li>Apply knowledge through practical examples</li><li>Develop problem-solving skills</li><li>Build confidence in using these concepts</li></ul>','// Example code or demonstration\nconsole.log(\"This is a sample example\");',3),(13,5,'SQL Queries','This lesson covers the fundamentals and practical applications of the topic.','<h2>Lesson Overview</h2><p>In this comprehensive lesson, you will learn the key concepts and practical skills needed to master this topic. We will cover both theoretical foundations and hands-on examples to ensure you gain a complete understanding.</p><h3>Learning Objectives</h3><ul><li>Understand the core concepts and principles</li><li>Apply knowledge through practical examples</li><li>Develop problem-solving skills</li><li>Build confidence in using these concepts</li></ul>','// Example code or demonstration\nconsole.log(\"This is a sample example\");',1),(14,5,'Database Design','This lesson covers the fundamentals and practical applications of the topic.','<h2>Lesson Overview</h2><p>In this comprehensive lesson, you will learn the key concepts and practical skills needed to master this topic. We will cover both theoretical foundations and hands-on examples to ensure you gain a complete understanding.</p><h3>Learning Objectives</h3><ul><li>Understand the core concepts and principles</li><li>Apply knowledge through practical examples</li><li>Develop problem-solving skills</li><li>Build confidence in using these concepts</li></ul>','// Example code or demonstration\nconsole.log(\"This is a sample example\");',2),(15,5,'MySQL Advanced','This lesson covers the fundamentals and practical applications of the topic.','<h2>Lesson Overview</h2><p>In this comprehensive lesson, you will learn the key concepts and practical skills needed to master this topic. We will cover both theoretical foundations and hands-on examples to ensure you gain a complete understanding.</p><h3>Learning Objectives</h3><ul><li>Understand the core concepts and principles</li><li>Apply knowledge through practical examples</li><li>Develop problem-solving skills</li><li>Build confidence in using these concepts</li></ul>','// Example code or demonstration\nconsole.log(\"This is a sample example\");',3),(16,6,'Spring Boot Setup','This lesson covers the fundamentals and practical applications of the topic.','<h2>Lesson Overview</h2><p>In this comprehensive lesson, you will learn the key concepts and practical skills needed to master this topic. We will cover both theoretical foundations and hands-on examples to ensure you gain a complete understanding.</p><h3>Learning Objectives</h3><ul><li>Understand the core concepts and principles</li><li>Apply knowledge through practical examples</li><li>Develop problem-solving skills</li><li>Build confidence in using these concepts</li></ul>','// Example code or demonstration\nconsole.log(\"This is a sample example\");',1),(17,6,'REST API with Spring','This lesson covers the fundamentals and practical applications of the topic.','<h2>Lesson Overview</h2><p>In this comprehensive lesson, you will learn the key concepts and practical skills needed to master this topic. We will cover both theoretical foundations and hands-on examples to ensure you gain a complete understanding.</p><h3>Learning Objectives</h3><ul><li>Understand the core concepts and principles</li><li>Apply knowledge through practical examples</li><li>Develop problem-solving skills</li><li>Build confidence in using these concepts</li></ul>','// Example code or demonstration\nconsole.log(\"This is a sample example\");',2),(18,6,'Security in Spring Boot','This lesson covers the fundamentals and practical applications of the topic.','<h2>Lesson Overview</h2><p>In this comprehensive lesson, you will learn the key concepts and practical skills needed to master this topic. We will cover both theoretical foundations and hands-on examples to ensure you gain a complete understanding.</p><h3>Learning Objectives</h3><ul><li>Understand the core concepts and principles</li><li>Apply knowledge through practical examples</li><li>Develop problem-solving skills</li><li>Build confidence in using these concepts</li></ul>','// Example code or demonstration\nconsole.log(\"This is a sample example\");',3),(24,42,'Introduction to Python','Giới thiệu về Python và cài đặt môi trường lập trình','<h2>What is Python?</h2>\n<ul>\n  <li>Python is a high-level, interpreted programming language</li>\n  <li>Python is known for its simple and readable syntax</li>\n  <li>Python is widely used in web development, data science, AI, and automation</li>\n  <li>Python was created by Guido van Rossum in 1991</li>\n  <li>Python supports multiple programming paradigms</li>\n</ul>\n<h2>Installing Python</h2>\n<p>To get started with Python, you need to install it on your system:</p>\n<div class=\"code-block\">\n<p><strong>Windows:</strong> Download from python.org<br>\n<strong>Mac:</strong> Use Homebrew: brew install python<br>\n<strong>Linux:</strong> sudo apt-get install python3</p>\n</div>','print(\"Hello, Python!\") 123456\nprint(\"Welcome to Python programming!\")',1),(25,42,'Python Syntax and Variables','Học cú pháp cơ bản và cách khai báo biến trong Python','<h2>Python Syntax Rules</h2>\n<ul>\n  <li>Python uses indentation to define code blocks</li>\n  <li>No semicolons needed at the end of statements</li>\n  <li>Comments start with # symbol</li>\n  <li>Python is case-sensitive</li>\n</ul>\n<h2>Variables in Python</h2>\n<p>Variables are used to store data values:</p>\n<div class=\"syntax-example\">\n<p>Variable names must start with a letter or underscore<br>\nVariable names can contain letters, numbers, and underscores<br>\nVariable names are case-sensitive</p>\n</div>','# Variable examples\nname = \"John\"\nage = 25\nheight = 5.9\nis_student = True\nprint(f\"Name: {name}, Age: {age}\")',2),(26,42,'Data Types in Python','Tìm hiểu các kiểu dữ liệu cơ bản trong Python','<h2>Basic Data Types</h2>\n<ul>\n  <li><strong>String (str):</strong> Text data enclosed in quotes</li>\n  <li><strong>Integer (int):</strong> Whole numbers</li>\n  <li><strong>Float:</strong> Decimal numbers</li>\n  <li><strong>Boolean (bool):</strong> True or False values</li>\n  <li><strong>List:</strong> Ordered collection of items</li>\n  <li><strong>Dictionary (dict):</strong> Key-value pairs</li>\n</ul>\n<h2>Type Checking</h2>\n<p>Use the type() function to check data types:</p>\n<div class=\"code-example\">\n<p>The type() function returns the class type of an object</p>\n</div>','# Data type examples\ntext = \"Hello World\"\nnumber = 42\ndecimal = 3.14\nflag = True\nmy_list = [1, 2, 3, 4]\nmy_dict = {\"name\": \"Alice\", \"age\": 30}\n\nprint(type(text))    # <class \'str\'>\nprint(type(number))  # <class \'int\'>\nprint(type(flag))    # <class \'bool\'>',3),(27,42,'String Operations','Các thao tác với chuỗi trong Python','<h2>String Methods</h2>\n<ul>\n  <li><strong>len():</strong> Get string length</li>\n  <li><strong>upper(), lower():</strong> Change case</li>\n  <li><strong>strip():</strong> Remove whitespace</li>\n  <li><strong>replace():</strong> Replace substrings</li>\n  <li><strong>split():</strong> Split string into list</li>\n  <li><strong>join():</strong> Join list elements into string</li>\n</ul>\n<h2>String Formatting</h2>\n<p>Multiple ways to format strings in Python:</p>\n<div class=\"formatting-methods\">\n<p><strong>f-strings:</strong> f\"Hello {name}\"<br>\n<strong>format():</strong> \"Hello {}\".format(name)<br>\n<strong>% formatting:</strong> \"Hello %s\" % name</p>\n</div>','# String operations\ntext = \"  Python Programming  \"\nprint(len(text))                    # 21\nprint(text.strip())                 # \"Python Programming\"\nprint(text.upper())                 # \"  PYTHON PROGRAMMING  \"\nprint(text.replace(\"Python\", \"Java\"))  # \"  Java Programming  \"\n\n# String formatting\nname = \"Alice\"\nage = 25\nmessage = f\"My name is {name} and I am {age} years old\"\nprint(message)',4),(28,42,'Lists and List Operations','Làm việc với danh sách trong Python','<h2>Python Lists</h2>\n<ul>\n  <li>Lists are ordered collections of items</li>\n  <li>Lists are mutable (can be changed)</li>\n  <li>Lists can contain different data types</li>\n  <li>Lists are created using square brackets []</li>\n  <li>List items are indexed starting from 0</li>\n</ul>\n<h2>Common List Methods</h2>\n<p>Essential methods for working with lists:</p>\n<div class=\"list-methods\">\n<p><strong>append():</strong> Add item to end<br>\n<strong>insert():</strong> Add item at specific position<br>\n<strong>remove():</strong> Remove first occurrence of item<br>\n<strong>pop():</strong> Remove and return item at index<br>\n<strong>sort():</strong> Sort the list</p>\n</div>','# List operations\nfruits = [\"apple\", \"banana\", \"orange\"]\nnumbers = [1, 2, 3, 4, 5]\nmixed = [\"hello\", 42, True, 3.14]\n\n# Accessing elements\nprint(fruits[0])        # \"apple\"\nprint(fruits[-1])       # \"orange\" (last item)\n\n# List methods\nfruits.append(\"grape\")\nfruits.insert(1, \"kiwi\")\nfruits.remove(\"banana\")\nprint(fruits)           # [\'apple\', \'kiwi\', \'orange\', \'grape\']\n\n# List slicing\nprint(numbers[1:4])     # [2, 3, 4]',5),(29,42,'Dictionaries and Sets','Tìm hiểu về từ điển và tập hợp trong Python','<h2>Python Dictionaries</h2>\n<ul>\n  <li>Dictionaries store key-value pairs</li>\n  <li>Keys must be unique and immutable</li>\n  <li>Values can be any data type</li>\n  <li>Dictionaries are unordered (before Python 3.7)</li>\n  <li>Created using curly braces {}</li>\n</ul>\n<h2>Sets in Python</h2>\n<p>Sets are collections of unique elements:</p>\n<div class=\"set-properties\">\n<p><strong>Unique elements:</strong> No duplicates allowed<br>\n<strong>Unordered:</strong> No indexing<br>\n<strong>Mutable:</strong> Can add/remove elements<br>\n<strong>Mathematical operations:</strong> Union, intersection, difference</p>\n</div>','# Dictionary operations\nstudent = {\n    \"name\": \"John\",\n    \"age\": 20,\n    \"grades\": [85, 90, 78]\n}\n\nprint(student[\"name\"])           # \"John\"\nstudent[\"email\"] = \"john@email.com\"\nstudent.update({\"city\": \"New York\"})\n\n# Dictionary methods\nprint(student.keys())            # dict_keys([\'name\', \'age\', \'grades\', \'email\', \'city\'])\nprint(student.values())\n\n# Sets\ncolors = {\"red\", \"green\", \"blue\", \"red\"}  # Duplicate removed\nprint(colors)                    # {\'red\', \'green\', \'blue\'}\ncolors.add(\"yellow\")\ncolors.remove(\"red\")',6),(30,42,'Control Flow - If Statements','Câu lệnh điều kiện trong Python','<h2>Conditional Statements</h2>\n<ul>\n  <li><strong>if:</strong> Execute code if condition is true</li>\n  <li><strong>elif:</strong> Check additional conditions</li>\n  <li><strong>else:</strong> Execute code if all conditions are false</li>\n  <li>Python uses indentation to define code blocks</li>\n  <li>Conditions can use comparison and logical operators</li>\n</ul>\n<h2>Comparison Operators</h2>\n<p>Operators used in conditional statements:</p>\n<div class=\"operators\">\n<p><strong>==</strong> Equal to<br>\n<strong>!=</strong> Not equal to<br>\n<strong>&lt;</strong> Less than<br>\n<strong>&gt;</strong> Greater than<br>\n<strong>&lt;=</strong> Less than or equal<br>\n<strong>&gt;=</strong> Greater than or equal</p>\n</div>','# If-elif-else example\nage = 18\nscore = 85\n\nif age >= 18:\n    print(\"You are an adult\")\nelif age >= 13:\n    print(\"You are a teenager\")\nelse:\n    print(\"You are a child\")\n\n# Multiple conditions\nif score >= 90:\n    grade = \"A\"\nelif score >= 80:\n    grade = \"B\"\nelif score >= 70:\n    grade = \"C\"\nelse:\n    grade = \"F\"\n\nprint(f\"Your grade is: {grade}\")\n\n# Logical operators\nif age >= 18 and score >= 80:\n    print(\"Eligible for scholarship\")',7),(31,42,'Loops - For and While','Vòng lặp trong Python','<h2>For Loops</h2>\n<ul>\n  <li>Used to iterate over sequences (lists, strings, ranges)</li>\n  <li>More common when you know the number of iterations</li>\n  <li>Can iterate over any iterable object</li>\n  <li>Use range() function for numeric sequences</li>\n</ul>\n<h2>While Loops</h2>\n<p>Execute code while a condition is true:</p>\n<div class=\"while-loop\">\n<p><strong>Condition:</strong> Must eventually become false<br>\n<strong>Infinite loops:</strong> Avoid conditions that never change<br>\n<strong>Break:</strong> Exit loop early<br>\n<strong>Continue:</strong> Skip current iteration</p>\n</div>','# For loop examples\nfruits = [\"apple\", \"banana\", \"orange\"]\nfor fruit in fruits:\n    print(f\"I like {fruit}\")\n\n# Range function\nfor i in range(5):          # 0 to 4\n    print(f\"Number: {i}\")\n\nfor i in range(1, 6):       # 1 to 5\n    print(f\"Count: {i}\")\n\n# While loop\ncount = 0\nwhile count < 5:\n    print(f\"Count is: {count}\")\n    count += 1\n\n# Loop control\nfor i in range(10):\n    if i == 3:\n        continue    # Skip 3\n    if i == 7:\n        break      # Exit at 7\n    print(i)',8),(32,42,'Functions in Python','Định nghĩa và sử dụng hàm trong Python','<h2>Function Basics</h2>\n<ul>\n  <li>Functions are reusable blocks of code</li>\n  <li>Defined using the <strong>def</strong> keyword</li>\n  <li>Can accept parameters and return values</li>\n  <li>Help organize code and avoid repetition</li>\n  <li>Follow DRY principle (Don\'t Repeat Yourself)</li>\n</ul>\n<h2>Function Components</h2>\n<p>Parts of a Python function:</p>\n<div class=\"function-parts\">\n<p><strong>def keyword:</strong> Starts function definition<br>\n<strong>Function name:</strong> Should be descriptive<br>\n<strong>Parameters:</strong> Input values (optional)<br>\n<strong>Docstring:</strong> Function description (optional)<br>\n<strong>Return statement:</strong> Output value (optional)</p>\n</div>','# Basic function\ndef greet():\n    print(\"Hello, World!\")\n\ngreet()  # Call the function\n\n# Function with parameters\ndef greet_person(name):\n    print(f\"Hello, {name}!\")\n\ngreet_person(\"Alice\")\n\n# Function with return value\ndef add_numbers(a, b):\n    \"\"\"Add two numbers and return the result\"\"\"\n    result = a + b\n    return result\n\nsum_result = add_numbers(5, 3)\nprint(f\"Sum: {sum_result}\")\n\n# Function with default parameters\ndef introduce(name, age=25):\n    return f\"My name is {name} and I am {age} years old\"\n\nprint(introduce(\"Bob\"))\nprint(introduce(\"Carol\", 30))',9),(33,42,'Function Parameters and Arguments','Tham số và đối số trong hàm Python','<h2>Types of Parameters</h2>\n<ul>\n  <li><strong>Positional parameters:</strong> Order matters</li>\n  <li><strong>Keyword arguments:</strong> Named parameters</li>\n  <li><strong>Default parameters:</strong> Optional with default values</li>\n  <li><strong>*args:</strong> Variable number of positional arguments</li>\n  <li><strong>**kwargs:</strong> Variable number of keyword arguments</li>\n</ul>\n<h2>Parameter Order</h2>\n<p>Parameters must follow this order:</p>\n<div class=\"parameter-order\">\n<p>1. Positional parameters<br>\n2. Default parameters<br>\n3. *args<br>\n4. **kwargs</p>\n</div>','# Different parameter types\ndef flexible_function(required, default_param=\"default\", *args, **kwargs):\n    print(f\"Required: {required}\")\n    print(f\"Default: {default_param}\")\n    print(f\"Args: {args}\")\n    print(f\"Kwargs: {kwargs}\")\n\n# Function calls\nflexible_function(\"hello\")\nflexible_function(\"hello\", \"world\", 1, 2, 3, name=\"Alice\", age=25)\n\n# Practical example\ndef calculate_total(base_price, *extras, tax_rate=0.1, **discounts):\n    total = base_price + sum(extras)\n    \n    # Apply discounts\n    for discount_type, amount in discounts.items():\n        total -= amount\n    \n    # Add tax\n    total += total * tax_rate\n    \n    return round(total, 2)\n\n# Usage\nprice = calculate_total(100, 20, 15, tax_rate=0.08, \n                       student_discount=10, loyalty_discount=5)\nprint(f\"Total price: ${price}\")',10),(34,42,'File Handling','Đọc và ghi file trong Python','<h2>File Operations</h2>\n<ul>\n  <li><strong>open():</strong> Open a file for reading or writing</li>\n  <li><strong>read():</strong> Read entire file content</li>\n  <li><strong>readline():</strong> Read one line at a time</li>\n  <li><strong>write():</strong> Write text to file</li>\n  <li><strong>close():</strong> Close file (important for memory)</li>\n</ul>\n<h2>File Modes</h2>\n<p>Different modes for opening files:</p>\n<div class=\"file-modes\">\n<p><strong>\'r\':</strong> Read mode (default)<br>\n<strong>\'w\':</strong> Write mode (overwrites existing)<br>\n<strong>\'a\':</strong> Append mode<br>\n<strong>\'r+\':</strong> Read and write<br>\n<strong>\'b\':</strong> Binary mode (rb, wb)</p>\n</div>','# Reading from file\ntry:\n    with open(\"sample.txt\", \"r\") as file:\n        content = file.read()\n        print(content)\nexcept FileNotFoundError:\n    print(\"File not found!\")\n\n# Writing to file\ndata = [\"Alice\", \"Bob\", \"Charlie\"]\nwith open(\"names.txt\", \"w\") as file:\n    for name in data:\n        file.write(name + \"\n\")\n\n# Appending to file\nwith open(\"names.txt\", \"a\") as file:\n    file.write(\"David\n\")\n\n# Reading line by line\nwith open(\"names.txt\", \"r\") as file:\n    for line_number, line in enumerate(file, 1):\n        print(f\"Line {line_number}: {line.strip()}\")\n\n# Working with CSV-like data\nstudents = [\n    {\"name\": \"Alice\", \"grade\": 85},\n    {\"name\": \"Bob\", \"grade\": 92}\n]\n\nwith open(\"grades.txt\", \"w\") as file:\n    for student in students:\n        file.write(f\"{student[\'name\']},{student[\'grade\']}\n\")',11),(35,42,'Error Handling','Xử lý lỗi và ngoại lệ trong Python','<h2>Exception Handling</h2>\n<ul>\n  <li><strong>try:</strong> Code that might raise an exception</li>\n  <li><strong>except:</strong> Handle specific exceptions</li>\n  <li><strong>else:</strong> Execute if no exception occurs</li>\n  <li><strong>finally:</strong> Always executes (cleanup code)</li>\n  <li><strong>raise:</strong> Manually raise an exception</li>\n</ul>\n<h2>Common Exceptions</h2>\n<p>Frequently encountered exception types:</p>\n<div class=\"exception-types\">\n<p><strong>ValueError:</strong> Invalid value for operation<br>\n<strong>TypeError:</strong> Wrong data type<br>\n<strong>FileNotFoundError:</strong> File doesn\'t exist<br>\n<strong>IndexError:</strong> List index out of range<br>\n<strong>KeyError:</strong> Dictionary key not found</p>\n</div>','# Basic exception handling\ndef divide_numbers(a, b):\n    try:\n        result = a / b\n        print(f\"Result: {result}\")\n    except ZeroDivisionError:\n        print(\"Error: Cannot divide by zero!\")\n    except TypeError:\n        print(\"Error: Please provide numbers only!\")\n    else:\n        print(\"Division completed successfully\")\n    finally:\n        print(\"Division operation finished\")\n\n# Test the function\ndivide_numbers(10, 2)    # Normal case\ndivide_numbers(10, 0)    # Division by zero\ndivide_numbers(10, \"a\")  # Type error\n\n# Multiple exception types\ndef process_data(data):\n    try:\n        # Convert to integer\n        number = int(data)\n        # Access list element\n        my_list = [1, 2, 3]\n        result = my_list[number]\n        return result\n    except (ValueError, TypeError) as e:\n        print(f\"Input error: {e}\")\n    except IndexError as e:\n        print(f\"Index error: {e}\")\n    except Exception as e:\n        print(f\"Unexpected error: {e}\")\n\n# Custom exceptions\nclass CustomError(Exception):\n    pass\n\ndef validate_age(age):\n    if age < 0:\n        raise CustomError(\"Age cannot be negative!\")\n    return True',12),(36,42,'Classes and Objects','Lập trình hướng đối tượng cơ bản trong Python','<h2>Object-Oriented Programming</h2>\n<ul>\n  <li><strong>Class:</strong> Blueprint for creating objects</li>\n  <li><strong>Object:</strong> Instance of a class</li>\n  <li><strong>Attributes:</strong> Variables that belong to a class</li>\n  <li><strong>Methods:</strong> Functions that belong to a class</li>\n  <li><strong>__init__:</strong> Constructor method</li>\n</ul>\n<h2>Class Components</h2>\n<p>Key elements of a Python class:</p>\n<div class=\"class-components\">\n<p><strong>Class definition:</strong> class ClassName:<br>\n<strong>Constructor:</strong> __init__(self, parameters)<br>\n<strong>Instance methods:</strong> Functions with self parameter<br>\n<strong>Instance variables:</strong> self.variable_name<br>\n<strong>Class variables:</strong> Shared by all instances</p>\n</div>','# Basic class definition\nclass Student:\n    # Class variable\n    school_name = \"Python Academy\"\n    \n    def __init__(self, name, age, grade):\n        # Instance variables\n        self.name = name\n        self.age = age\n        self.grade = grade\n        self.courses = []\n    \n    def introduce(self):\n        return f\"Hi, I\'m {self.name}, {self.age} years old\"\n    \n    def add_course(self, course):\n        self.courses.append(course)\n        print(f\"{course} added to {self.name}\'s courses\")\n    \n    def get_courses(self):\n        return self.courses\n    \n    def calculate_gpa(self, grades):\n        if len(grades) == 0:\n            return 0\n        return sum(grades) / len(grades)\n\n# Creating objects\nstudent1 = Student(\"Alice\", 20, \"A\")\nstudent2 = Student(\"Bob\", 19, \"B\")\n\n# Using methods\nprint(student1.introduce())\nstudent1.add_course(\"Python Programming\")\nstudent1.add_course(\"Data Structures\")\n\nprint(f\"Courses: {student1.get_courses()}\")\nprint(f\"School: {Student.school_name}\")\n\n# Class variables vs instance variables\nprint(f\"Student 1 school: {student1.school_name}\")\nprint(f\"Student 2 school: {student2.school_name}\")',13),(37,42,'Inheritance and Polymorphism','Kế thừa và đa hình trong Python','<h2>Inheritance</h2>\n<ul>\n  <li>Create new classes based on existing classes</li>\n  <li>Child class inherits attributes and methods</li>\n  <li>Use <strong>super()</strong> to access parent methods</li>\n  <li>Override methods in child classes</li>\n  <li>Python supports multiple inheritance</li>\n</ul>\n<h2>Polymorphism</h2>\n<p>Same interface, different implementations:</p>\n<div class=\"polymorphism\">\n<p><strong>Method overriding:</strong> Redefine parent methods<br>\n<strong>Duck typing:</strong> If it walks like a duck...<br>\n<strong>Abstract methods:</strong> Must be implemented by child<br>\n<strong>Interface consistency:</strong> Same method names</p>\n</div>','# Base class\nclass Animal:\n    def __init__(self, name, species):\n        self.name = name\n        self.species = species\n    \n    def make_sound(self):\n        return \"Some generic animal sound\"\n    \n    def info(self):\n        return f\"{self.name} is a {self.species}\"\n\n# Child classes\nclass Dog(Animal):\n    def __init__(self, name, breed):\n        super().__init__(name, \"Dog\")\n        self.breed = breed\n    \n    def make_sound(self):  # Override parent method\n        return \"Woof! Woof!\"\n    \n    def fetch(self):\n        return f\"{self.name} is fetching the ball\"\n\nclass Cat(Animal):\n    def __init__(self, name, color):\n        super().__init__(name, \"Cat\")\n        self.color = color\n    \n    def make_sound(self):  # Override parent method\n        return \"Meow! Meow!\"\n    \n    def climb(self):\n        return f\"{self.name} is climbing the tree\"\n\n# Using inheritance\ndog = Dog(\"Buddy\", \"Golden Retriever\")\ncat = Cat(\"Whiskers\", \"Orange\")\n\nprint(dog.info())        # Inherited method\nprint(dog.make_sound())  # Overridden method\nprint(dog.fetch())       # Dog-specific method\n\n# Polymorphism in action\nanimals = [dog, cat]\nfor animal in animals:\n    print(f\"{animal.name}: {animal.make_sound()}\")\n\n# Method resolution order\nprint(Dog.__mro__)',14),(38,42,'Modules and Packages','Sử dụng module và package trong Python','<h2>Python Modules</h2>\n<ul>\n  <li>Modules are Python files containing code</li>\n  <li>Use <strong>import</strong> to use module functions</li>\n  <li>Modules help organize and reuse code</li>\n  <li>Python has many built-in modules</li>\n  <li>Create custom modules for your projects</li>\n</ul>\n<h2>Import Methods</h2>\n<p>Different ways to import modules:</p>\n<div class=\"import-methods\">\n<p><strong>import module:</strong> Import entire module<br>\n<strong>from module import function:</strong> Import specific function<br>\n<strong>import module as alias:</strong> Use shorter name<br>\n<strong>from module import *:</strong> Import all (not recommended)</p>\n</div>','# Built-in modules\nimport math\nimport random\nimport datetime\nfrom collections import Counter\n\n# Using math module\nprint(f\"Pi: {math.pi}\")\nprint(f\"Square root of 16: {math.sqrt(16)}\")\nprint(f\"Factorial of 5: {math.factorial(5)}\")\n\n# Using random module\nprint(f\"Random number: {random.randint(1, 100)}\")\ncolors = [\"red\", \"green\", \"blue\", \"yellow\"]\nprint(f\"Random color: {random.choice(colors)}\")\n\n# Using datetime\nnow = datetime.datetime.now()\nprint(f\"Current time: {now.strftime(\'%Y-%m-%d %H:%M:%S\')}\")\n\n# Collections module\ntext = \"hello world hello python\"\nword_count = Counter(text.split())\nprint(f\"Word count: {word_count}\")\n\n# Create custom module (save as my_utils.py)\n\"\"\"\ndef calculate_area(length, width):\n    return length * width\n\ndef greet_user(name):\n    return f\"Hello, {name}! Welcome to our program.\"\n\nPI = 3.14159\n\nclass Calculator:\n    def add(self, a, b):\n        return a + b\n    \n    def multiply(self, a, b):\n        return a * b\n\"\"\"\n\n# Using custom module\n# from my_utils import calculate_area, greet_user, Calculator\n# \n# area = calculate_area(10, 5)\n# message = greet_user(\"Alice\")\n# calc = Calculator()\n# result = calc.add(10, 5)',15),(39,44,'Introduction to Angular','Get started with Angular framework and understand its architecture','<h2>What is Angular?</h2>\n<ul>\n  <li>Angular is a platform and framework for building single-page client applications using HTML and TypeScript</li>\n  <li>Developed and maintained by Google</li>\n  <li>Based on TypeScript programming language</li>\n  <li>Uses component-based architecture</li>\n  <li>Provides powerful CLI tools for development</li>\n</ul>\n<h2>Key Features</h2>\n<p>Angular provides many built-in features:</p>\n<ul>\n  <li>Two-way data binding</li>\n  <li>Dependency injection</li>\n  <li>Routing and navigation</li>\n  <li>Forms handling</li>\n  <li>HTTP client for API communication</li>\n</ul>','// Install Angular CLI\nnpm install -g @angular/cli\n\n// Create new project\nng new my-app\ncd my-app\nng serve',1),(40,44,'Angular Components','Learn how to create and use Angular components','<h2>Angular Components</h2>\n<p>Components are the main building blocks of Angular applications. Each component controls a patch of screen called a view.</p>\n<h3>Component Structure:</h3>\n<ul>\n  <li><strong>Template:</strong> HTML with Angular markup</li>\n  <li><strong>Class:</strong> TypeScript code that handles data and functionality</li>\n  <li><strong>Styles:</strong> CSS styles specific to the component</li>\n  <li><strong>Metadata:</strong> @Component decorator with configuration</li>\n</ul>','import { Component } from \"@angular/core\";\n\n@Component({\n  selector: \"app-hello\",\n  template: `\n    <h1>{{title}}</h1>\n    <p>Welcome {{name}}!</p>\n  `,\n  styles: [`h1 { color: blue; }`]\n})\nexport class HelloComponent {\n  title = \"My Angular App\";\n  name = \"Developer\";\n}',2),(41,44,'Data Binding in Angular','Master different types of data binding in Angular applications','<h2>Types of Data Binding</h2>\n<ul>\n  <li><strong>Interpolation:</strong> {{expression}} - Display component data</li>\n  <li><strong>Property Binding:</strong> [property]=\"value\" - Set element properties</li>\n  <li><strong>Event Binding:</strong> (event)=\"handler\" - Listen to events</li>\n  <li><strong>Two-way Binding:</strong> [(ngModel)]=\"property\" - Combine property and event binding</li>\n</ul>\n<h2>Directives</h2>\n<p>Angular directives extend HTML with additional functionality:</p>\n<ul>\n  <li>*ngIf for conditional rendering</li>\n  <li>*ngFor for loops</li>\n  <li>ngClass and ngStyle for dynamic styling</li>\n</ul>','<div class=\"user-profile\">\n  <!-- Interpolation -->\n  <h2>{{user.name}}</h2>\n  \n  <!-- Property binding -->\n  <img [src]=\"user.avatar\" [alt]=\"user.name\">\n  \n  <!-- Event binding -->\n  <button (click)=\"editProfile()\">Edit Profile</button>\n  \n  <!-- Two-way binding -->\n  <input [(ngModel)]=\"user.email\" placeholder=\"Email\">\n  \n  <!-- Structural directives -->\n  <div *ngIf=\"user.isActive\">User is active</div>\n  <ul>\n    <li *ngFor=\"let skill of user.skills\">{{skill}}</li>\n  </ul>\n</div>',3),(42,45,'Vue.js Basics','Introduction to Vue.js framework and reactive programming','<h2>What is Vue.js?</h2>\n<ul>\n  <li>Progressive JavaScript framework for building user interfaces</li>\n  <li>Focuses on the view layer and is easy to integrate with other libraries</li>\n  <li>Uses reactive data binding and component-based architecture</li>\n  <li>Smaller learning curve compared to other frameworks</li>\n  <li>Excellent documentation and community support</li>\n</ul>\n<h2>Vue 3 Features</h2>\n<p>New features in Vue 3:</p>\n<ul>\n  <li>Composition API for better code organization</li>\n  <li>Multiple root elements support</li>\n  <li>Better TypeScript support</li>\n  <li>Improved performance and smaller bundle size</li>\n</ul>','// Vue 3 with Composition API\n<template>\n  <div>\n    <h1>{{ greeting }}</h1>\n    <button @click=\"increment\">Count: {{ count }}</button>\n  </div>\n</template>\n\n<script>\nimport { ref, computed } from \"vue\"\n\nexport default {\n  setup() {\n    const count = ref(0)\n    const greeting = computed(() => \n      `Hello! You clicked ${count.value} times`\n    )\n    \n    const increment = () => {\n      count.value++\n    }\n    \n    return { count, greeting, increment }\n  }\n}\n</script>',1),(43,46,'Introduction to MongoDB','Learn NoSQL concepts and MongoDB fundamentals','<h2>What is MongoDB?</h2>\n<ul>\n  <li>Document-oriented NoSQL database</li>\n  <li>Stores data in flexible, JSON-like documents (BSON)</li>\n  <li>Schema-less design allows for dynamic data structures</li>\n  <li>Horizontally scalable with built-in replication</li>\n  <li>Supports rich queries and indexing</li>\n</ul>\n<h2>Key Concepts</h2>\n<ul>\n  <li><strong>Database:</strong> Container for collections</li>\n  <li><strong>Collection:</strong> Group of documents (like table in SQL)</li>\n  <li><strong>Document:</strong> Set of key-value pairs (like row in SQL)</li>\n  <li><strong>Field:</strong> Key-value pair in a document (like column in SQL)</li>\n</ul>','// MongoDB document example\n{\n  \"_id\": ObjectId(\"507f1f77bcf86cd799439011\"),\n  \"name\": \"John Doe\",\n  \"email\": \"john@example.com\",\n  \"age\": 29,\n  \"address\": {\n    \"street\": \"123 Main St\",\n    \"city\": \"New York\",\n    \"zipcode\": \"10001\"\n  },\n  \"hobbies\": [\"reading\", \"swimming\", \"coding\"],\n  \"createdAt\": ISODate(\"2023-01-15T09:30:00Z\")\n}\n\n// Basic queries\ndb.users.find({\"age\": {$gte: 18}})\ndb.users.insertOne({name: \"Alice\", age: 25})\ndb.users.updateOne({name: \"John\"}, {$set: {age: 30}})',1),(44,47,'Docker Fundamentals','Learn containerization with Docker','<h2>What is Docker?</h2>\n<ul>\n  <li>Platform for developing, shipping, and running applications in containers</li>\n  <li>Containers package applications with all dependencies</li>\n  <li>Lightweight and portable across different environments</li>\n  <li>Consistent behavior from development to production</li>\n  <li>Efficient resource utilization compared to virtual machines</li>\n</ul>\n<h2>Core Concepts</h2>\n<ul>\n  <li><strong>Image:</strong> Read-only template for creating containers</li>\n  <li><strong>Container:</strong> Running instance of an image</li>\n  <li><strong>Dockerfile:</strong> Text file with instructions to build an image</li>\n  <li><strong>Registry:</strong> Storage for Docker images (Docker Hub)</li>\n</ul>','# Dockerfile example\nFROM node:16-alpine\nWORKDIR /app\nCOPY package*.json ./\nRUN npm install\nCOPY . .\nEXPOSE 3000\nCMD [\"npm\", \"start\"]\n\n# Docker commands\ndocker build -t my-app .\ndocker run -p 3000:3000 my-app\ndocker ps\ndocker stop container_id\ndocker images',1),(48,11,'Node.js Installation','Install and configure Node.js environment','<h2>Node.js Installation Guide</h2><p>Step-by-step guide to install Node.js on different operating systems.</p><ul><li>Download from nodejs.org</li><li>Run installer</li><li>Verify installation</li></ul>','node --version\nnpm --version',1),(49,11,'JavaScript Review','Review JavaScript fundamentals for Node.js','<h2>JavaScript Essentials</h2><p>Review important JavaScript concepts needed for Node.js development.</p>','const fs = require(\"fs\");\nconst path = require(\"path\");\nconsole.log(\"Node.js JavaScript\");',2),(50,11,'Creating Your First Server','Build a simple HTTP server','<h2>HTTP Server</h2><p>Create your first Node.js server using the built-in http module.</p>','const http = require(\"http\");\nconst server = http.createServer((req, res) => {\n  res.writeHead(200, {\"Content-Type\": \"text/html\"});\n  res.end(\"Hello Node.js!\");\n});\nserver.listen(3000);',3),(51,38,'React Introduction','Understanding React and its ecosystem','<h2>What is React?</h2><p>React is a JavaScript library for building user interfaces, particularly web applications.</p>','import React from \"react\";\nfunction App() {\n  return <h1>Hello React!</h1>;\n}\nexport default App;',1),(52,38,'JSX and Components','Learning JSX syntax and creating components','<h2>JSX Basics</h2><p>JSX allows you to write HTML-like syntax in JavaScript.</p>','function Welcome({name}) {\n  return <div>Welcome, {name}!</div>;\n}\nfunction App() {\n  return <Welcome name=\"React Developer\" />;\n}',2),(53,38,'State and Props','Managing component state and props','<h2>State Management</h2><p>Learn how to manage component state and pass data through props.</p>','import {useState} from \"react\";\nfunction Counter() {\n  const [count, setCount] = useState(0);\n  return (\n    <div>\n      <p>Count: {count}</p>\n      <button onClick={() => setCount(count + 1)}>+</button>\n    </div>\n  );\n}',3),(63,45,'Vue.js Setup','Setting up Vue.js development environment','<h2>Vue.js Installation</h2><p>Install Vue.js and create your first Vue application.</p>','// Vue 3 setup\nimport { createApp } from \"vue\"\nconst app = createApp({\n  data() {\n    return { message: \"Hello Vue!\" }\n  }\n})\napp.mount(\"#app\")',1),(64,45,'Vue Components','Creating and using Vue components','<h2>Vue Components</h2><p>Learn how to create reusable components in Vue.js applications.</p>','<template>\n  <div class=\"greeting\">\n    <h1>{{ message }}</h1>\n    <button @click=\"updateMessage\">Click me</button>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return { message: \"Hello Vue Component!\" }\n  },\n  methods: {\n    updateMessage() {\n      this.message = \"Button clicked!\"\n    }\n  }\n}\n</script>',2),(65,45,'Vue Router','Navigation and routing in Vue applications','<h2>Vue Router</h2><p>Implement client-side routing for single-page applications.</p>','import { createRouter, createWebHistory } from \"vue-router\"\nimport Home from \"./components/Home.vue\"\nimport About from \"./components/About.vue\"\n\nconst routes = [\n  { path: \"/\", component: Home },\n  { path: \"/about\", component: About }\n]\n\nconst router = createRouter({\n  history: createWebHistory(),\n  routes\n})',3),(66,46,'MongoDB Installation','Installing and configuring MongoDB','<h2>MongoDB Setup</h2><p>Install MongoDB database and understand its architecture.</p>','// MongoDB connection\nconst { MongoClient } = require(\"mongodb\");\nconst client = new MongoClient(\"mongodb://localhost:27017\");\nasync function connect() {\n  await client.connect();\n  console.log(\"Connected to MongoDB\");\n}',1),(67,46,'CRUD Operations','Create, Read, Update, Delete operations','<h2>MongoDB CRUD</h2><p>Learn basic database operations in MongoDB.</p>','// Insert document\ndb.users.insertOne({\n  name: \"John Doe\",\n  email: \"john@example.com\",\n  age: 30\n});\n\n// Find documents\ndb.users.find({ age: { $gte: 18 } });',2),(68,46,'Indexing and Performance','Database indexing and optimization','<h2>MongoDB Indexing</h2><p>Optimize database performance with proper indexing strategies.</p>','// Create index\ndb.users.createIndex({ email: 1 });\n\n// Compound index\ndb.users.createIndex({ name: 1, age: -1 });\n\n// Check query performance\ndb.users.find({ email: \"john@example.com\" }).explain(\"executionStats\");',3),(69,47,'Docker Installation','Installing Docker and understanding containers','<h2>Docker Setup</h2><p>Install Docker and understand containerization concepts.</p>','# Check Docker installation\ndocker --version\ndocker info\n\n# Run first container\ndocker run hello-world',1),(70,47,'Dockerfile Basics','Creating Docker images with Dockerfile','<h2>Building Images</h2><p>Learn how to create custom Docker images using Dockerfile.</p>','FROM node:16-alpine\nWORKDIR /app\nCOPY package*.json ./\nRUN npm install\nCOPY . .\nEXPOSE 3000\nCMD [\"npm\", \"start\"]',2),(71,47,'Kubernetes Basics','Container orchestration with Kubernetes','<h2>Kubernetes Introduction</h2><p>Deploy and manage containers at scale using Kubernetes.</p>','apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: my-app\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: my-app\n  template:\n    metadata:\n      labels:\n        app: my-app\n    spec:\n      containers:\n      - name: my-app\n        image: my-app:latest\n        ports:\n        - containerPort: 3000',3),(72,48,'ML Introduction','Introduction to Machine Learning concepts','<h2>Machine Learning Basics</h2><p>Understand fundamental concepts of machine learning and AI.</p>','import numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\n\n# Load data\ndata = pd.read_csv(\"data.csv\")\nX = data.drop(\"target\", axis=1)\ny = data[\"target\"]\n\n# Split data\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)',1),(73,48,'Data Processing','Data cleaning and preprocessing techniques','<h2>Data Preprocessing</h2><p>Learn how to clean and prepare data for machine learning models.</p>','from sklearn.preprocessing import StandardScaler, LabelEncoder\n\n# Handle missing values\ndata.fillna(data.mean(), inplace=True)\n\n# Scale features\nscaler = StandardScaler()\nX_scaled = scaler.fit_transform(X)\n\n# Encode categorical variables\nle = LabelEncoder()\ny_encoded = le.fit_transform(y)',2),(74,48,'Model Training','Training machine learning models','<h2>Model Training</h2><p>Build and train various machine learning models for prediction.</p>','from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score\n\n# Create model\nmodel = RandomForestClassifier(n_estimators=100)\n\n# Train model\nmodel.fit(X_train, y_train)\n\n# Make predictions\ny_pred = model.predict(X_test)\naccuracy = accuracy_score(y_test, y_pred)\nprint(f\"Accuracy: {accuracy:.2f}\")',3),(75,49,'Flutter Setup','Setting up Flutter development environment','<h2>Flutter Installation</h2><p>Install Flutter SDK and set up development environment for mobile apps.</p>','// main.dart\nimport \"package:flutter/material.dart\";\n\nvoid main() {\n  runApp(MyApp());\n}\n\nclass MyApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      home: Scaffold(\n        appBar: AppBar(title: Text(\"Flutter App\")),\n        body: Center(child: Text(\"Hello Flutter!\")),\n      ),\n    );\n  }\n}',1),(76,49,'Widgets and Layouts','Understanding Flutter widgets and layouts','<h2>Flutter Widgets</h2><p>Learn about different types of widgets and how to create layouts.</p>','class MyWidget extends StatefulWidget {\n  @override\n  _MyWidgetState createState() => _MyWidgetState();\n}\n\nclass _MyWidgetState extends State<MyWidget> {\n  int counter = 0;\n\n  @override\n  Widget build(BuildContext context) {\n    return Column(\n      children: [\n        Text(\"Counter: $counter\"),\n        ElevatedButton(\n          onPressed: () => setState(() => counter++),\n          child: Text(\"Increment\"),\n        ),\n      ],\n    );\n  }\n}',2),(77,49,'Navigation and State','App navigation and state management','<h2>Navigation & State</h2><p>Implement navigation between screens and manage application state.</p>','// Navigation\nNavigator.push(\n  context,\n  MaterialPageRoute(builder: (context) => SecondScreen()),\n);\n\n// State management with Provider\nclass CounterModel extends ChangeNotifier {\n  int _count = 0;\n  int get count => _count;\n  \n  void increment() {\n    _count++;\n    notifyListeners();\n  }\n}',3),(78,50,'AWS Account Setup','Setting up AWS account and basic services','<h2>AWS Getting Started</h2><p>Create AWS account and understand the AWS management console.</p>','# AWS CLI installation\npip install awscli\n\n# Configure AWS credentials\naws configure\n\n# List S3 buckets\naws s3 ls',1),(79,50,'EC2 and S3','Virtual servers and object storage','<h2>EC2 and S3 Services</h2><p>Launch EC2 instances and use S3 for file storage.</p>','# Create S3 bucket\naws s3 mb s3://my-bucket-name\n\n# Upload file to S3\naws s3 cp file.txt s3://my-bucket-name/\n\n# Launch EC2 instance\naws ec2 run-instances --image-id ami-12345678 --count 1 --instance-type t2.micro',2),(80,50,'Lambda and RDS','Serverless functions and managed databases','<h2>Lambda and RDS</h2><p>Create serverless functions with Lambda and set up RDS databases.</p>','// Lambda function\nexports.handler = async (event) => {\n    const response = {\n        statusCode: 200,\n        body: JSON.stringify(\"Hello from Lambda!\"),\n    };\n    return response;\n};\n\n// RDS connection\nconst mysql = require(\"mysql2/promise\");\nconst connection = await mysql.createConnection({\n  host: \"mydb.amazonaws.com\",\n  user: \"admin\",\n  password: \"password\",\n  database: \"myapp\"\n});',3),(81,51,'GraphQL Basics','Introduction to GraphQL concepts','<h2>GraphQL Introduction</h2><p>Understand GraphQL query language and its advantages over REST.</p>','# GraphQL Query\nquery {\n  users {\n    id\n    name\n    email\n    posts {\n      title\n      content\n    }\n  }\n}\n\n# GraphQL Mutation\nmutation {\n  createUser(input: {\n    name: \"John Doe\"\n    email: \"john@example.com\"\n  }) {\n    id\n    name\n  }\n}',1),(82,51,'Schema Design','Designing GraphQL schemas and resolvers','<h2>GraphQL Schema</h2><p>Create GraphQL schemas and implement resolvers for data fetching.</p>','const { gql } = require(\"apollo-server-express\");\n\nconst typeDefs = gql`\n  type User {\n    id: ID!\n    name: String!\n    email: String!\n    posts: [Post!]!\n  }\n  \n  type Post {\n    id: ID!\n    title: String!\n    content: String!\n    author: User!\n  }\n  \n  type Query {\n    users: [User!]!\n    user(id: ID!): User\n  }\n`;',2),(83,51,'GraphQL with Database','Integrating GraphQL with databases','<h2>Database Integration</h2><p>Connect GraphQL resolvers with databases for real-world applications.</p>','const resolvers = {\n  Query: {\n    users: async () => {\n      return await User.findAll();\n    },\n    user: async (parent, { id }) => {\n      return await User.findByPk(id);\n    },\n  },\n  User: {\n    posts: async (user) => {\n      return await Post.findAll({ where: { userId: user.id } });\n    },\n  },\n  Mutation: {\n    createUser: async (parent, { input }) => {\n      return await User.create(input);\n    },\n  },\n};',3),(84,5,'Database Fundamentals','Hiểu về cơ sở dữ liệu, hệ quản trị cơ sở dữ liệu và vai trò của MySQL trong hệ sinh thái dữ liệu.','<h2>Tổng Quan Về Cơ Sở Dữ Liệu</h2><p>Cơ sở dữ liệu là tập hợp có tổ chức của thông tin được lưu trữ và truy cập điện tử. MySQL là một hệ quản trị cơ sở dữ liệu quan hệ (RDBMS) mã nguồn mở phổ biến.</p><h3>Các Khái Niệm Cơ Bản</h3><ul><li>Database (Cơ sở dữ liệu): Container chứa các bảng liên quan</li><li>Table (Bảng): Cấu trúc chứa dữ liệu với hàng và cột</li><li>Row (Hàng): Một bản ghi dữ liệu</li><li>Column (Cột): Một trường dữ liệu</li><li>Primary Key: Khóa chính định danh duy nhất</li><li>Foreign Key: Khóa ngoại tham chiếu đến bảng khác</li></ul>','-- Tạo cơ sở dữ liệu\nCREATE DATABASE company_db;\n\n-- Sử dụng cơ sở dữ liệu\nUSE company_db;\n\n-- Xem các database có sẵn\nSHOW DATABASES;',4),(85,5,'MySQL Installation and Configuration','Hướng dẫn cài đặt MySQL và các công cụ quản lý cơ sở dữ liệu.','<h2>Cài Đặt MySQL</h2><p>MySQL có thể được cài đặt trên nhiều hệ điều hành khác nhau. Chúng ta sẽ tìm hiểu các phương pháp cài đặt phổ biến.</p><h3>Các Công Cụ Quản Lý</h3><ul><li>MySQL Command Line Client</li><li>MySQL Workbench - Giao diện đồ họa</li><li>phpMyAdmin - Giao diện web</li><li>Navicat, HeidiSQL - Các công cụ bên thứ ba</li></ul><h3>Cấu Hình Cơ Bản</h3><ul><li>Thiết lập mật khẩu root</li><li>Cấu hình file my.cnf/my.ini</li><li>Quản lý user và quyền truy cập</li></ul>','-- Kết nối MySQL\nmysql -u root -p\n\n-- Tạo user mới\nCREATE USER \'newuser\'@\'localhost\' IDENTIFIED BY \'password\';\n\n-- Cấp quyền\nGRANT ALL PRIVILEGES ON *.* TO \'newuser\'@\'localhost\';\nFLUSH PRIVILEGES;',5),(86,5,'MySQL Data Types','Tìm hiểu các kiểu dữ liệu trong MySQL và cách sử dụng chúng hiệu quả.','<h2>Các Kiểu Dữ Liệu Cơ Bản</h2><p>MySQL hỗ trợ nhiều kiểu dữ liệu khác nhau, mỗi kiểu phù hợp với mục đích sử dụng cụ thể.</p><h3>Kiểu Số</h3><ul><li>INT, BIGINT, SMALLINT, TINYINT</li><li>DECIMAL, FLOAT, DOUBLE</li><li>BIT</li></ul><h3>Kiểu Chuỗi</h3><ul><li>VARCHAR, CHAR</li><li>TEXT, LONGTEXT</li><li>BINARY, VARBINARY</li></ul><h3>Kiểu Ngày Tháng</h3><ul><li>DATE, TIME, DATETIME</li><li>TIMESTAMP</li><li>YEAR</li></ul>','CREATE TABLE example_types (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    name VARCHAR(100) NOT NULL,\n    age TINYINT UNSIGNED,\n    salary DECIMAL(10,2),\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    is_active BOOLEAN DEFAULT TRUE\n);',6),(87,5,'Creating and Managing Tables','Học cách tạo, sửa đổi và xóa bảng trong MySQL.','<h2>Tạo Bảng</h2><p>Câu lệnh CREATE TABLE được sử dụng để tạo bảng mới với cấu trúc định sẵn.</p><h3>Cú Pháp Cơ Bản</h3><ul><li>Định nghĩa cột và kiểu dữ liệu</li><li>Thiết lập khóa chính và khóa ngoại</li><li>Sử dụng constraints (ràng buộc)</li><li>Thiết lập giá trị mặc định</li></ul><h3>Sửa Đổi Cấu Trúc Bảng</h3><ul><li>ALTER TABLE - thêm, xóa, sửa cột</li><li>Thay đổi kiểu dữ liệu</li><li>Thêm/xóa index</li></ul>','-- Tạo bảng employees\nCREATE TABLE employees (\n    employee_id INT AUTO_INCREMENT PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    hire_date DATE,\n    department_id INT,\n    INDEX idx_department (department_id)\n);\n\n-- Thêm cột mới\nALTER TABLE employees ADD COLUMN phone VARCHAR(15);\n\n-- Xóa cột\nALTER TABLE employees DROP COLUMN phone;',7),(88,5,'INSERT Statement','Học cách thêm dữ liệu vào bảng MySQL bằng câu lệnh INSERT.','<h2>Thêm Dữ Liệu Vào Bảng</h2><p>Câu lệnh INSERT được sử dụng để thêm dữ liệu mới vào bảng. Có nhiều cách khác nhau để sử dụng INSERT.</p><h3>Các Dạng INSERT</h3><ul><li>INSERT với giá trị cụ thể</li><li>INSERT nhiều hàng cùng lúc</li><li>INSERT với SELECT</li><li>INSERT ON DUPLICATE KEY UPDATE</li></ul><h3>Best Practices</h3><ul><li>Chỉ định tên cột rõ ràng</li><li>Xử lý lỗi và exceptions</li><li>Sử dụng prepared statements</li></ul>','-- Insert một hàng\nINSERT INTO employees (first_name, last_name, email, hire_date) \nVALUES (\'John\', \'Doe\', \'john.doe@email.com\', \'2024-01-15\');\n\n-- Insert nhiều hàng\nINSERT INTO employees (first_name, last_name, email, hire_date) \nVALUES \n    (\'Jane\', \'Smith\', \'jane.smith@email.com\', \'2024-01-16\'),\n    (\'Bob\', \'Johnson\', \'bob.johnson@email.com\', \'2024-01-17\');\n\n-- Insert từ SELECT\nINSERT INTO employees_backup \nSELECT * FROM employees WHERE hire_date > \'2024-01-01\';',8),(89,5,'Basic SELECT Statement','Nắm vững câu lệnh SELECT để truy vấn dữ liệu từ cơ sở dữ liệu.','<h2>Truy Vấn Dữ Liệu Cơ Bản</h2><p>SELECT là câu lệnh quan trọng nhất trong SQL, được sử dụng để truy xuất dữ liệu từ một hoặc nhiều bảng.</p><h3>Cú Pháp Cơ Bản</h3><ul><li>SELECT * - chọn tất cả cột</li><li>SELECT cột cụ thể</li><li>Sử dụng alias cho cột và bảng</li><li>DISTINCT - loại bỏ giá trị trùng lặp</li></ul><h3>Sắp Xếp Dữ Liệu</h3><ul><li>ORDER BY - sắp xếp kết quả</li><li>ASC và DESC</li><li>Sắp xếp theo nhiều cột</li></ul>','-- Select tất cả\nSELECT * FROM employees;\n\n-- Select cột cụ thể\nSELECT first_name, last_name, email FROM employees;\n\n-- Sử dụng alias\nSELECT first_name AS \'Tên\', last_name AS \'Họ\' FROM employees;\n\n-- Sắp xếp\nSELECT * FROM employees ORDER BY hire_date DESC;\n\n-- Loại bỏ trùng lặp\nSELECT DISTINCT department_id FROM employees;',9),(90,5,'WHERE Clause and Operators','Học cách lọc dữ liệu bằng điều kiện WHERE và các toán tử.','<h2>Lọc Dữ Liệu Với WHERE</h2><p>Mệnh đề WHERE được sử dụng để lọc dữ liệu dựa trên điều kiện cụ thể.</p><h3>Các Toán Tử So Sánh</h3><ul><li>=, !=, <>, <, >, <=, >=</li><li>BETWEEN - trong khoảng</li><li>IN - trong danh sách</li><li>LIKE - tìm kiếm mẫu</li><li>IS NULL, IS NOT NULL</li></ul><h3>Toán Tử Logic</h3><ul><li>AND, OR, NOT</li><li>Kết hợp nhiều điều kiện</li><li>Thứ tự ưu tiên</li></ul>','-- Điều kiện cơ bản\nSELECT * FROM employees WHERE department_id = 1;\n\n-- Sử dụng BETWEEN\nSELECT * FROM employees WHERE hire_date BETWEEN \'2024-01-01\' AND \'2024-12-31\';\n\n-- Sử dụng IN\nSELECT * FROM employees WHERE department_id IN (1, 2, 3);\n\n-- Sử dụng LIKE\nSELECT * FROM employees WHERE first_name LIKE \'J%\';\n\n-- Kết hợp điều kiện\nSELECT * FROM employees \nWHERE department_id = 1 AND hire_date > \'2024-01-01\';',10),(91,5,'Aggregate Functions','Tìm hiểu các hàm tổng hợp để tính toán và phân tích dữ liệu.','<h2>Các Hàm Tổng Hợp</h2><p>Hàm tổng hợp thực hiện tính toán trên một nhóm giá trị và trả về một giá trị duy nhất.</p><h3>Hàm Cơ Bản</h3><ul><li>COUNT() - đếm số lượng</li><li>SUM() - tính tổng</li><li>AVG() - tính trung bình</li><li>MIN(), MAX() - giá trị nhỏ nhất, lớn nhất</li></ul><h3>Sử Dụng Với GROUP BY</h3><ul><li>Nhóm dữ liệu theo cột</li><li>HAVING - điều kiện cho nhóm</li><li>Kết hợp nhiều hàm tổng hợp</li></ul>','-- Đếm tổng số nhân viên\nSELECT COUNT(*) FROM employees;\n\n-- Tính lương trung bình theo phòng ban\nSELECT department_id, AVG(salary) as avg_salary\nFROM employees\nGROUP BY department_id;\n\n-- Sử dụng HAVING\nSELECT department_id, COUNT(*) as emp_count\nFROM employees\nGROUP BY department_id\nHAVING emp_count > 5;\n\n-- Nhiều hàm tổng hợp\nSELECT department_id, \n       COUNT(*) as total_employees,\n       AVG(salary) as avg_salary,\n       MAX(salary) as max_salary\nFROM employees\nGROUP BY department_id;',11),(92,5,'UPDATE Statement','Học cách cập nhật dữ liệu trong bảng MySQL.','<h2>Cập Nhật Dữ Liệu</h2><p>Câu lệnh UPDATE được sử dụng để sửa đổi dữ liệu hiện có trong bảng.</p><h3>Cú Pháp Cơ Bản</h3><ul><li>UPDATE với WHERE - cập nhật có điều kiện</li><li>Cập nhật nhiều cột cùng lúc</li><li>Sử dụng biểu thức trong UPDATE</li><li>UPDATE với JOIN</li></ul><h3>An Toàn Khi UPDATE</h3><ul><li>Luôn sử dụng WHERE</li><li>Backup dữ liệu trước khi update</li><li>Test với SELECT trước</li><li>Sử dụng transaction</li></ul>','-- Update cơ bản\nUPDATE employees \nSET salary = 55000 \nWHERE employee_id = 1;\n\n-- Update nhiều cột\nUPDATE employees \nSET salary = salary * 1.1, \n    last_updated = NOW() \nWHERE department_id = 2;\n\n-- Update với điều kiện phức tạp\nUPDATE employees \nSET salary = CASE \n    WHEN years_experience > 5 THEN salary * 1.15\n    WHEN years_experience > 2 THEN salary * 1.10\n    ELSE salary * 1.05\nEND;',12),(93,5,'DELETE Statement','Học cách xóa dữ liệu an toàn từ bảng MySQL.','<h2>Xóa Dữ Liệu</h2><p>Câu lệnh DELETE được sử dụng để xóa các bản ghi từ bảng. Đây là thao tác không thể hoàn tác.</p><h3>Các Dạng DELETE</h3><ul><li>DELETE với WHERE - xóa có điều kiện</li><li>DELETE toàn bộ dữ liệu</li><li>TRUNCATE vs DELETE</li><li>DELETE với JOIN</li></ul><h3>Best Practices</h3><ul><li>Luôn backup trước khi xóa</li><li>Sử dụng transaction</li><li>Test với SELECT trước</li><li>Xem xét soft delete</li></ul>','-- Delete với điều kiện\nDELETE FROM employees \nWHERE employee_id = 100;\n\n-- Delete với điều kiện phức tạp\nDELETE FROM employees \nWHERE hire_date < \'2020-01-01\' \nAND department_id IS NULL;\n\n-- Soft delete (khuyến khích)\nUPDATE employees \nSET is_deleted = TRUE, deleted_at = NOW() \nWHERE employee_id = 100;\n\n-- TRUNCATE - xóa toàn bộ nhanh chóng\nTRUNCATE TABLE temp_table;',13),(94,5,'Table Joins','Nắm vững các loại JOIN để kết nối dữ liệu từ nhiều bảng.','<h2>Kết Nối Nhiều Bảng</h2><p>JOIN được sử dụng để kết nối dữ liệu từ hai hoặc nhiều bảng dựa trên mối quan hệ giữa chúng.</p><h3>Các Loại JOIN</h3><ul><li>INNER JOIN - lấy dữ liệu khớp từ cả hai bảng</li><li>LEFT JOIN - lấy tất cả từ bảng trái</li><li>RIGHT JOIN - lấy tất cả từ bảng phải</li><li>FULL OUTER JOIN - lấy tất cả từ cả hai bảng</li><li>CROSS JOIN - tích Cartesian</li></ul><h3>Self JOIN và Multiple JOIN</h3><ul><li>Kết nối bảng với chính nó</li><li>Kết nối nhiều bảng trong một truy vấn</li></ul>','-- INNER JOIN\nSELECT e.first_name, e.last_name, d.department_name\nFROM employees e\nINNER JOIN departments d ON e.department_id = d.department_id;\n\n-- LEFT JOIN\nSELECT e.first_name, e.last_name, d.department_name\nFROM employees e\nLEFT JOIN departments d ON e.department_id = d.department_id;\n\n-- Multiple JOIN\nSELECT e.first_name, e.last_name, d.department_name, p.project_name\nFROM employees e\nINNER JOIN departments d ON e.department_id = d.department_id\nINNER JOIN employee_projects ep ON e.employee_id = ep.employee_id\nINNER JOIN projects p ON ep.project_id = p.project_id;',14),(95,5,'Subqueries','Học cách sử dụng truy vấn con để tạo các truy vấn phức tạp.','<h2>Truy Vấn Con</h2><p>Subquery là truy vấn được lồng bên trong truy vấn khác. Chúng cho phép thực hiện các phép toán phức tạp.</p><h3>Các Loại Subquery</h3><ul><li>Scalar subquery - trả về một giá trị</li><li>Row subquery - trả về một hàng</li><li>Column subquery - trả về một cột</li><li>Table subquery - trả về một bảng</li></ul><h3>Vị Trí Subquery</h3><ul><li>Trong SELECT clause</li><li>Trong WHERE clause</li><li>Trong FROM clause</li><li>Trong HAVING clause</li></ul>','-- Subquery trong WHERE\nSELECT first_name, last_name, salary\nFROM employees\nWHERE salary > (SELECT AVG(salary) FROM employees);\n\n-- Subquery trong FROM\nSELECT dept_avg.department_id, dept_avg.avg_salary\nFROM (\n    SELECT department_id, AVG(salary) as avg_salary\n    FROM employees\n    GROUP BY department_id\n) as dept_avg\nWHERE dept_avg.avg_salary > 50000;\n\n-- EXISTS với subquery\nSELECT first_name, last_name\nFROM employees e\nWHERE EXISTS (\n    SELECT 1 FROM employee_projects ep \n    WHERE ep.employee_id = e.employee_id\n);',15),(96,5,'Database Views','Tìm hiểu về Views và cách sử dụng chúng để đơn giản hóa truy vấn.','<h2>Views Trong MySQL</h2><p>View là một bảng ảo được tạo từ kết quả của một câu lệnh SQL. Views giúp đơn giản hóa truy vấn phức tạp và tăng tính bảo mật.</p><h3>Lợi Ích Của Views</h3><ul><li>Đơn giản hóa truy vấn phức tạp</li><li>Tăng tính bảo mật dữ liệu</li><li>Tái sử dụng logic truy vấn</li><li>Cung cấp giao diện thống nhất</li></ul><h3>Quản Lý Views</h3><ul><li>CREATE VIEW - tạo view</li><li>ALTER VIEW - sửa đổi view</li><li>DROP VIEW - xóa view</li><li>Updatable views</li></ul>','-- Tạo view\nCREATE VIEW employee_details AS\nSELECT e.first_name, e.last_name, e.email, d.department_name\nFROM employees e\nINNER JOIN departments d ON e.department_id = d.department_id;\n\n-- Sử dụng view\nSELECT * FROM employee_details WHERE department_name = \'IT\';\n\n-- Sửa đổi view\nALTER VIEW employee_details AS\nSELECT e.first_name, e.last_name, e.email, d.department_name, e.salary\nFROM employees e\nINNER JOIN departments d ON e.department_id = d.department_id;\n\n-- Xóa view\nDROP VIEW employee_details;',16),(97,5,'Stored Procedures','Học cách tạo và sử dụng stored procedures để tái sử dụng logic.','<h2>Thủ Tục Lưu Trữ</h2><p>Stored Procedure là một tập hợp các câu lệnh SQL được lưu trong cơ sở dữ liệu và có thể được gọi lại nhiều lần.</p><h3>Lợi Ích</h3><ul><li>Tái sử dụng code</li><li>Tăng hiệu suất</li><li>Tăng tính bảo mật</li><li>Dễ bảo trì</li></ul><h3>Cú Pháp Cơ Bản</h3><ul><li>CREATE PROCEDURE - Tạo procedure</li><li>CALL procedure_name() - Gọi procedure</li><li>DROP PROCEDURE - Xóa procedure</li></ul><h3>Tham Số (Parameters)</h3><ul><li><strong>IN</strong> - Tham số đầu vào</li><li><strong>OUT</strong> - Tham số đầu ra</li><li><strong>INOUT</strong> - Tham số vừa vào vừa ra</li></ul><h3>Các Thành Phần Nâng Cao</h3><ul><li>Biến và điều kiện (IF/ELSE)</li><li>Vòng lặp (WHILE, LOOP)</li><li>Cursors để duyệt dữ liệu</li><li>Xử lý lỗi (Exception Handling)</li></ul><h3>Ví Dụ Thực Tế</h3><pre><code>-- Gọi procedure\nCALL GetEmployeesByDept(1);\n\n-- Procedure với tham số OUT\nCALL GetEmployeeCount(@total);\nSELECT @total;</code></pre>','DELIMITER //\n\nCREATE PROCEDURE GetEmployeesByDept(IN dept_id INT)\nBEGIN\n    SELECT first_name, last_name, salary\n    FROM employees\n    WHERE department_id = dept_id;\nEND //\n\nDELIMITER ;\n\n-- Gọi procedure\nCALL GetEmployeesByDept(1);\n\n-- Procedure với tham số OUT\nDELIMITER //\nCREATE PROCEDURE GetEmployeeCount(OUT emp_count INT)\nBEGIN\n    SELECT COUNT(*) INTO emp_count FROM employees;\nEND //\nDELIMITER ;\n\n-- Sử dụng\nCALL GetEmployeeCount(@total);\nSELECT @total AS \'Total Employees\';',17),(98,5,'Database Indexes','Học cách sử dụng indexes để tối ưu hóa hiệu suất truy vấn.','<h2>Chỉ Mục Trong MySQL</h2><p>Index là cấu trúc dữ liệu giúp tăng tốc độ truy vấn bằng cách tạo đường dẫn nhanh đến dữ liệu.</p><h3>Loại Index</h3><ul><li>PRIMARY KEY - chỉ mục khóa chính</li><li>UNIQUE INDEX - chỉ mục duy nhất</li><li>COMPOSITE INDEX - chỉ mục tổng hợp</li><li>FULLTEXT INDEX - chỉ mục văn bản</li></ul><h3>Khi Nào Sử Dụng</h3><ul><li>Cột được sử dụng trong WHERE</li><li>Cột được sử dụng trong JOIN</li><li>Cột được sử dụng trong ORDER BY</li><li>Cân nhắc cost vs benefit</li></ul>','-- Tạo index đơn giản\nCREATE INDEX idx_employee_email ON employees(email);\n\n-- Tạo composite index\nCREATE INDEX idx_dept_hire_date ON employees(department_id, hire_date);\n\n-- Tạo unique index\nCREATE UNIQUE INDEX idx_employee_code ON employees(employee_code);\n\n-- Xem indexes của bảng\nSHOW INDEX FROM employees;\n\n-- Phân tích query plan\nEXPLAIN SELECT * FROM employees WHERE email = \'john@example.com\';\n\n-- Xóa index\nDROP INDEX idx_employee_email ON employees;',20),(99,5,'Database Transactions','Tìm hiểu về transactions và các đặc tính ACID trong MySQL.','<h2>Giao Dịch Cơ Sở Dữ Liệu</h2><p>Transaction là một đơn vị công việc bao gồm một hoặc nhiều câu lệnh SQL được thực thi như một khối duy nhất.</p><h3>Đặc Tính ACID</h3><ul><li>Atomicity - Tính nguyên tử</li><li>Consistency - Tính nhất quán</li><li>Isolation - Tính cô lập</li><li>Durability - Tính bền vững</li></ul><h3>Câu Lệnh Transaction</h3><ul><li>START TRANSACTION / BEGIN</li><li>COMMIT - xác nhận</li><li>ROLLBACK - hủy bỏ</li><li>SAVEPOINT - điểm lưu</li></ul>','-- Bắt đầu transaction\nSTART TRANSACTION;\n\n-- Thực hiện các câu lệnh\nUPDATE accounts SET balance = balance - 1000 WHERE account_id = 1;\nUPDATE accounts SET balance = balance + 1000 WHERE account_id = 2;\n\n-- Kiểm tra kết quả\nSELECT * FROM accounts WHERE account_id IN (1, 2);\n\n-- Xác nhận transaction\nCOMMIT;\n\n-- Ví dụ với ROLLBACK\nSTART TRANSACTION;\nDELETE FROM employees WHERE department_id = 999;\n-- Nếu có lỗi\nROLLBACK;\n\n-- Sử dụng SAVEPOINT\nSTART TRANSACTION;\nINSERT INTO employees VALUES (...);\nSAVEPOINT sp1;\nUPDATE employees SET salary = salary * 1.1;\nROLLBACK TO sp1;\nCOMMIT;',21),(100,5,'Locks and Concurrency','Hiểu về cơ chế khóa và xử lý đồng thời trong MySQL.','<h2>Khóa Và Đồng Thời</h2><p>MySQL sử dụng các cơ chế khóa để đảm bảo tính nhất quán dữ liệu khi có nhiều người dùng truy cập đồng thời.</p><h3>Loại Khóa</h3><ul><li>Shared Lock (S) - khóa chia sẻ</li><li>Exclusive Lock (X) - khóa độc quyền</li><li>Row-level locks - khóa cấp hàng</li><li>Table-level locks - khóa cấp bảng</li></ul><h3>Isolation Levels</h3><ul><li>READ UNCOMMITTED</li><li>READ COMMITTED</li><li>REPEATABLE READ</li><li>SERIALIZABLE</li></ul>','-- Xem isolation level hiện tại\nSELECT @@GLOBAL.tx_isolation, @@SESSION.tx_isolation;\n\n-- Thay đổi isolation level\nSET SESSION TRANSACTION ISOLATION LEVEL READ COMMITTED;\n\n-- Lock bảng thủ công\nLOCK TABLES employees READ;\nSELECT * FROM employees;\nUNLOCK TABLES;\n\n-- Lock cho update\nLOCK TABLES employees WRITE;\nUPDATE employees SET salary = salary * 1.05;\nUNLOCK TABLES;\n\n-- Sử dụng SELECT FOR UPDATE\nSTART TRANSACTION;\nSELECT * FROM accounts WHERE account_id = 1 FOR UPDATE;\nUPDATE accounts SET balance = balance - 100 WHERE account_id = 1;\nCOMMIT;',22),(101,5,'Backup and Recovery','Học cách sao lưu và khôi phục dữ liệu MySQL.','<h2>Sao Lưu Và Khôi Phục</h2><p>Việc sao lưu dữ liệu định kỳ là rất quan trọng để bảo vệ dữ liệu khỏi mất mát.</p><h3>Phương Pháp Backup</h3><ul><li>mysqldump - logical backup</li><li>MySQL Enterprise Backup</li><li>Percona XtraBackup</li><li>Binary log backup</li></ul><h3>Loại Backup</h3><ul><li>Full backup - sao lưu toàn bộ</li><li>Incremental backup - sao lưu tăng dần</li><li>Differential backup - sao lưu khác biệt</li><li>Point-in-time recovery</li></ul>','-- Backup toàn bộ database\nmysqldump -u root -p --all-databases > full_backup.sql\n\n-- Backup một database cụ thể\nmysqldump -u root -p company_db > company_backup.sql\n\n-- Backup với cấu trúc và dữ liệu\nmysqldump -u root -p --routines --triggers company_db > complete_backup.sql\n\n-- Backup chỉ cấu trúc\nmysqldump -u root -p --no-data company_db > structure_only.sql\n\n-- Restore database\nmysql -u root -p company_db < company_backup.sql\n\n-- Backup binary logs\nmysqlbinlog mysql-bin.000001 > binlog_backup.sql',23),(102,5,'Performance Tuning','Tối ưu hóa hiệu suất MySQL thông qua các kỹ thuật tuning.','<h2>Tối Ưu Hiệu Suất</h2><p>Performance tuning là quá trình tối ưu hóa cấu hình và truy vấn để MySQL hoạt động hiệu quả nhất.</p><h3>Các Kỹ Thuật Tối Ưu</h3><ul><li>Query optimization - tối ưu truy vấn</li><li>Index optimization - tối ưu chỉ mục</li><li>Configuration tuning - tối ưu cấu hình</li><li>Schema design - thiết kế schema</li></ul><h3>Công Cụ Phân Tích</h3><ul><li>EXPLAIN - phân tích execution plan</li><li>SHOW PROCESSLIST - xem tiến trình</li><li>Performance Schema</li><li>MySQL Workbench Performance Dashboard</li></ul>','-- Phân tích query performance\nEXPLAIN SELECT e.first_name, d.department_name \nFROM employees e \nJOIN departments d ON e.department_id = d.department_id \nWHERE e.salary > 50000;\n\n-- Xem slow queries\nSHOW VARIABLES LIKE \'slow_query_log\';\nSET GLOBAL slow_query_log = ON;\nSET GLOBAL long_query_time = 2;\n\n-- Kiểm tra index usage\nSHOW INDEX FROM employees;\nSHOW STATUS LIKE \'Handler_read%\';\n\n-- Optimize table\nOPTIMIZE TABLE employees;\n\n-- Analyze table statistics\nANALYZE TABLE employees;\n\n-- Show table status\nSHOW TABLE STATUS LIKE \'employees\';',24),(103,5,'MySQL Replication','Tìm hiểu về nhân bản dữ liệu để tăng tính khả dụng và hiệu suất.','<h2>Nhân Bản MySQL</h2><p>Replication là quá trình sao chép dữ liệu từ master server sang một hoặc nhiều slave servers.</p><h3>Loại Replication</h3><ul><li>Master-Slave replication</li><li>Master-Master replication</li><li>Statement-based replication</li><li>Row-based replication</li></ul><h3>Lợi Ích</h3><ul><li>Load balancing - cân bằng tải</li><li>High availability - tính khả dụng cao</li><li>Backup - sao lưu</li><li>Data distribution - phân phối dữ liệu</li></ul>','-- Cấu hình Master server\n-- Trong my.cnf\nserver-id = 1\nlog-bin = mysql-bin\nbinlog-format = ROW\n\n-- Tạo user replication\nCREATE USER \'repl\'@\'%\' IDENTIFIED BY \'password\';\nGRANT REPLICATION SLAVE ON *.* TO \'repl\'@\'%\';\nFLUSH PRIVILEGES;\n\n-- Lấy thông tin master\nSHOW MASTER STATUS;\n\n-- Cấu hình Slave server\n-- Trong my.cnf\nserver-id = 2\n\n-- Cấu hình slave\nCHANGE MASTER TO\n  MASTER_HOST=\'master_ip\',\n  MASTER_USER=\'repl\',\n  MASTER_PASSWORD=\'password\',\n  MASTER_LOG_FILE=\'mysql-bin.000001\',\n  MASTER_LOG_POS=154;\n\n-- Bắt đầu replication\nSTART SLAVE;\n\n-- Kiểm tra trạng thái\nSHOW SLAVE STATUS;',25),(104,5,'MySQL Security','Tìm hiểu các biện pháp bảo mật MySQL để bảo vệ dữ liệu.','<h2>Bảo Mật MySQL</h2><p>Bảo mật là một khía cạnh quan trọng trong quản lý cơ sở dữ liệu MySQL.</p><h3>Các Biện Pháp Bảo Mật</h3><ul><li>User management - quản lý người dùng</li><li>Privilege management - quản lý quyền</li><li>SSL/TLS encryption - mã hóa kết nối</li><li>Data encryption - mã hóa dữ liệu</li></ul><h3>Best Practices</h3><ul><li>Strong passwords - mật khẩu mạnh</li><li>Principle of least privilege</li><li>Regular security updates</li><li>Network security</li></ul>','-- Tạo user với quyền hạn chế\nCREATE USER \'app_user\'@\'localhost\' IDENTIFIED BY \'StrongP@ssw0rd\';\nGRANT SELECT, INSERT, UPDATE ON company_db.* TO \'app_user\'@\'localhost\';\n\n-- Tạo user chỉ đọc\nCREATE USER \'readonly_user\'@\'%\' IDENTIFIED BY \'ReadOnlyP@ss\';\nGRANT SELECT ON company_db.* TO \'readonly_user\'@\'%\';\n\n-- Xem quyền của user\nSHOW GRANTS FOR \'app_user\'@\'localhost\';\n\n-- Thu hồi quyền\nREVOKE INSERT ON company_db.* FROM \'app_user\'@\'localhost\';\n\n-- Đổi mật khẩu\nALTER USER \'app_user\'@\'localhost\' IDENTIFIED BY \'NewP@ssw0rd\';\n\n-- Xóa user\nDROP USER \'old_user\'@\'localhost\';\n\n-- Kiểm tra user đang kết nối\nSHOW PROCESSLIST;\n\n-- Cấu hình SSL\n-- Trong my.cnf\nssl-ca = ca-cert.pem\nssl-cert = server-cert.pem\nssl-key = server-key.pem',26),(105,5,'Working with JSON','Học cách làm việc với dữ liệu JSON trong MySQL.','<h2>Kiểu Dữ Liệu JSON</h2><p>MySQL hỗ trợ kiểu dữ liệu JSON native từ phiên bản 5.7, cho phép lưu trữ và thao tác dữ liệu JSON hiệu quả.</p><h3>Tính Năng JSON</h3><ul><li>Native JSON data type</li><li>JSON functions - các hàm JSON</li><li>JSON indexing - đánh chỉ mục JSON</li><li>JSON path expressions</li></ul><h3>Ứng Dụng</h3><ul><li>Flexible schema design</li><li>API response storage</li><li>Configuration data</li><li>Document databases</li></ul>','-- Tạo bảng với cột JSON\nCREATE TABLE products (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    name VARCHAR(100),\n    specifications JSON,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\n-- Insert dữ liệu JSON\nINSERT INTO products (name, specifications) VALUES\n(\'Laptop\', JSON_OBJECT(\n    \'brand\', \'Dell\',\n    \'cpu\', \'Intel i7\',\n    \'ram\', \'16GB\',\n    \'storage\', JSON_ARRAY(\'512GB SSD\', \'1TB HDD\')\n));\n\n-- Query dữ liệu JSON\nSELECT name, \n       JSON_EXTRACT(specifications, \'$.brand\') as brand,\n       JSON_EXTRACT(specifications, \'$.ram\') as ram\nFROM products;\n\n-- Sử dụng ->> operator\nSELECT name, specifications->>\'$.brand\' as brand\nFROM products;\n\n-- Update JSON data\nUPDATE products \nSET specifications = JSON_SET(specifications, \'$.price\', 1200)\nWHERE id = 1;\n\n-- Tìm kiếm trong JSON\nSELECT * FROM products \nWHERE JSON_EXTRACT(specifications, \'$.brand\') = \'Dell\';',27),(106,5,'Table Partitioning','Tìm hiểu về phân vùng bảng để tối ưu hiệu suất với dữ liệu lớn.','<h2>Phân Vùng Bảng</h2><p>Partitioning là kỹ thuật chia một bảng lớn thành nhiều phần nhỏ hơn để cải thiện hiệu suất và quản lý.</p><h3>Loại Partitioning</h3><ul><li>RANGE partitioning - phân vùng theo khoảng</li><li>LIST partitioning - phân vùng theo danh sách</li><li>HASH partitioning - phân vùng theo hash</li><li>KEY partitioning - phân vùng theo key</li></ul><h3>Lợi Ích</h3><ul><li>Improved query performance</li><li>Easier maintenance</li><li>Parallel processing</li><li>Better resource utilization</li></ul>','-- RANGE partitioning theo năm\nCREATE TABLE sales (\n    id INT NOT NULL,\n    sale_date DATE NOT NULL,\n    amount DECIMAL(10,2),\n    PRIMARY KEY (id, sale_date)\n)\nPARTITION BY RANGE (YEAR(sale_date)) (\n    PARTITION p2020 VALUES LESS THAN (2021),\n    PARTITION p2021 VALUES LESS THAN (2022),\n    PARTITION p2022 VALUES LESS THAN (2023),\n    PARTITION p2023 VALUES LESS THAN (2024),\n    PARTITION p_future VALUES LESS THAN MAXVALUE\n);\n\n-- LIST partitioning theo region\nCREATE TABLE customers (\n    id INT NOT NULL,\n    name VARCHAR(100),\n    region VARCHAR(20),\n    PRIMARY KEY (id, region)\n)\nPARTITION BY LIST COLUMNS(region) (\n    PARTITION p_north VALUES IN (\'North\', \'Northeast\'),\n    PARTITION p_south VALUES IN (\'South\', \'Southeast\'),\n    PARTITION p_west VALUES IN (\'West\', \'Southwest\'),\n    PARTITION p_other VALUES IN (\'Central\', \'International\')\n);\n\n-- Xem thông tin partitions\nSELECT * FROM INFORMATION_SCHEMA.PARTITIONS \nWHERE TABLE_NAME = \'sales\';',28),(107,5,'Common Table Expressions','Học cách sử dụng CTEs để viết truy vấn phức tạp dễ đọc hơn.','<h2>Common Table Expressions</h2><p>CTE là một tính năng cho phép định nghĩa temporary result sets có thể được tham chiếu trong câu lệnh SQL.</p><h3>Loại CTEs</h3><ul><li>Non-recursive CTEs</li><li>Recursive CTEs</li><li>Multiple CTEs</li><li>Nested CTEs</li></ul><h3>Lợi Ích</h3><ul><li>Improved readability</li><li>Code reusability</li><li>Complex query simplification</li><li>Alternative to views</li></ul>','-- CTE cơ bản\nWITH department_stats AS (\n    SELECT department_id, \n           COUNT(*) as emp_count,\n           AVG(salary) as avg_salary\n    FROM employees\n    GROUP BY department_id\n)\nSELECT d.department_name, \n       ds.emp_count,\n       ds.avg_salary\nFROM departments d\nJOIN department_stats ds ON d.department_id = ds.department_id;\n\n-- Multiple CTEs\nWITH \nhigh_performers AS (\n    SELECT employee_id, first_name, last_name, salary\n    FROM employees\n    WHERE salary > 75000\n),\ndept_averages AS (\n    SELECT department_id, AVG(salary) as avg_salary\n    FROM employees\n    GROUP BY department_id\n)\nSELECT hp.first_name, hp.last_name, hp.salary, da.avg_salary\nFROM high_performers hp\nJOIN employees e ON hp.employee_id = e.employee_id\nJOIN dept_averages da ON e.department_id = da.department_id;\n\n-- Recursive CTE (organizational hierarchy)\nWITH RECURSIVE employee_hierarchy AS (\n    SELECT employee_id, first_name, last_name, manager_id, 1 as level\n    FROM employees\n    WHERE manager_id IS NULL\n    \n    UNION ALL\n    \n    SELECT e.employee_id, e.first_name, e.last_name, e.manager_id, eh.level + 1\n    FROM employees e\n    JOIN employee_hierarchy eh ON e.manager_id = eh.employee_id\n)\nSELECT * FROM employee_hierarchy ORDER BY level, employee_id;',29),(108,5,'Window Functions','Tìm hiểu về window functions để thực hiện phân tích dữ liệu nâng cao.','<h2>Hàm Cửa Sổ</h2><p>Window functions thực hiện tính toán trên một tập hợp các hàng liên quan đến hàng hiện tại mà không cần GROUP BY.</p><h3>Loại Window Functions</h3><ul><li>Ranking functions: ROW_NUMBER, RANK, DENSE_RANK</li><li>Analytic functions: LAG, LEAD, FIRST_VALUE, LAST_VALUE</li><li>Aggregate functions: SUM, AVG, COUNT (with OVER)</li></ul><h3>Mệnh Đề</h3><ul><li>OVER clause</li><li>PARTITION BY</li><li>ORDER BY</li><li>Frame specification</li></ul>','-- ROW_NUMBER và RANK\nSELECT first_name, last_name, salary, department_id,\n       ROW_NUMBER() OVER (PARTITION BY department_id ORDER BY salary DESC) as row_num,\n       RANK() OVER (PARTITION BY department_id ORDER BY salary DESC) as rank_num,\n       DENSE_RANK() OVER (PARTITION BY department_id ORDER BY salary DESC) as dense_rank\nFROM employees;\n\n-- Running totals với window functions\nSELECT first_name, last_name, salary,\n       SUM(salary) OVER (ORDER BY hire_date) as running_total,\n       AVG(salary) OVER (ORDER BY hire_date ROWS BETWEEN 2 PRECEDING AND CURRENT ROW) as moving_avg\nFROM employees\nORDER BY hire_date;\n\n-- LAG và LEAD\nSELECT first_name, last_name, salary,\n       LAG(salary) OVER (ORDER BY hire_date) as prev_salary,\n       LEAD(salary) OVER (ORDER BY hire_date) as next_salary,\n       salary - LAG(salary) OVER (ORDER BY hire_date) as salary_diff\nFROM employees\nORDER BY hire_date;\n\n-- FIRST_VALUE và LAST_VALUE\nSELECT first_name, last_name, salary, department_id,\n       FIRST_VALUE(salary) OVER (PARTITION BY department_id ORDER BY salary DESC) as highest_salary,\n       LAST_VALUE(salary) OVER (PARTITION BY department_id ORDER BY salary DESC \n                               RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) as lowest_salary\nFROM employees;',30),(109,5,'User-Defined Functions','Tạo các hàm tùy chỉnh để thực hiện các phép tính phức tạp.','<h2>Hàm Người Dùng</h2><p>MySQL cho phép tạo các hàm tùy chỉnh để thực hiện các phép tính và trả về giá trị.</p><h3>Loại Hàm</h3><ul><li>Scalar functions - trả về một giá trị</li><li>Table functions - trả về bảng</li><li>Aggregate functions - hàm tổng hợp</li></ul><h3>Đặc Điểm</h3><ul><li>DETERMINISTIC vs NON-DETERMINISTIC</li><li>READS SQL DATA</li><li>MODIFIES SQL DATA</li><li>Return type specification</li></ul>','DELIMITER //\n\nCREATE FUNCTION CalculateBonus(salary DECIMAL(10,2), years INT)\nRETURNS DECIMAL(10,2)\nDETERMINISTIC\nREADS SQL DATA\nBEGIN\n    DECLARE bonus DECIMAL(10,2);\n    \n    IF years >= 5 THEN\n        SET bonus = salary * 0.15;\n    ELSEIF years >= 2 THEN\n        SET bonus = salary * 0.10;\n    ELSE\n        SET bonus = salary * 0.05;\n    END IF;\n    \n    RETURN bonus;\nEND //\n\nDELIMITER ;\n\n-- Sử dụng function\nSELECT first_name, last_name, salary,\n       CalculateBonus(salary, YEAR(NOW()) - YEAR(hire_date)) as bonus\nFROM employees;',18),(110,5,'Database Triggers','Tìm hiểu về triggers và cách sử dụng chúng để tự động hóa các tác vụ.','<h2>Triggers Trong MySQL</h2><p>Trigger là một stored procedure đặc biệt được thực thi tự động khi có sự kiện xảy ra trên bảng.</p><h3>Loại Triggers</h3><ul><li><strong>BEFORE INSERT/UPDATE/DELETE</strong> - Thực thi trước khi thay đổi</li><li><strong>AFTER INSERT/UPDATE/DELETE</strong> - Thực thi sau khi thay đổi</li><li><strong>Row-level triggers</strong> - Thực thi cho mỗi dòng bị ảnh hưởng</li></ul><h3>Ứng Dụng Thực Tế</h3><ul><li><strong>Audit trails</strong> - Theo dõi và ghi lại mọi thay đổi</li><li><strong>Data validation</strong> - Kiểm tra tính hợp lệ của dữ liệu</li><li><strong>Automatic calculations</strong> - Tính toán và cập nhật tự động</li><li><strong>Logging</strong> - Ghi log hệ thống</li><li><strong>Business rules</strong> - Thực thi quy tắc nghiệp vụ</li></ul><h3>Cú Pháp Cơ Bản</h3><pre><code>CREATE TRIGGER trigger_name\n{BEFORE | AFTER} {INSERT | UPDATE | DELETE}\nON table_name FOR EACH ROW\nBEGIN\n    -- Trigger logic here\nEND;</code></pre><h3>Từ Khóa Đặc Biệt</h3><ul><li><strong>NEW</strong> - Giá trị mới (INSERT, UPDATE)</li><li><strong>OLD</strong> - Giá trị cũ (UPDATE, DELETE)</li></ul><h3>Quản Lý Triggers</h3><pre><code>-- Xem triggers\nSHOW TRIGGERS;\n\n-- Xóa trigger\nDROP TRIGGER IF EXISTS trigger_name;</code></pre>','DELIMITER //\n\n-- Trigger để audit khi update salary\nCREATE TRIGGER salary_audit\nAFTER UPDATE ON employees\nFOR EACH ROW\nBEGIN\n    IF OLD.salary != NEW.salary THEN\n        INSERT INTO salary_audit_log (employee_id, old_salary, new_salary, changed_by, change_date)\n        VALUES (NEW.employee_id, OLD.salary, NEW.salary, USER(), NOW());\n    END IF;\nEND //\n\n-- Trigger validation trước khi insert\nCREATE TRIGGER validate_employee\nBEFORE INSERT ON employees\nFOR EACH ROW\nBEGIN\n    IF NEW.salary < 0 THEN\n        SIGNAL SQLSTATE \'45000\' SET MESSAGE_TEXT = \'Salary cannot be negative\';\n    END IF;\n    \n    IF NEW.email NOT LIKE \'%@%\' THEN\n        SIGNAL SQLSTATE \'45000\' SET MESSAGE_TEXT = \'Invalid email format\';\n    END IF;\nEND //\n\n-- Trigger tự động cập nhật timestamp\nCREATE TRIGGER auto_timestamp\nBEFORE UPDATE ON products\nFOR EACH ROW\nBEGIN\n    SET NEW.updated_at = NOW();\nEND //\n\nDELIMITER ;\n\n-- Kiểm tra triggers\nSHOW TRIGGERS LIKE \'employees\';',19);
/*!40000 ALTER TABLE `lessons` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `messagereads`
--

DROP TABLE IF EXISTS `messagereads`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `messagereads` (
  `ReadID` int NOT NULL AUTO_INCREMENT,
  `MessageID` int DEFAULT NULL,
  `UserID` int DEFAULT NULL,
  `ReadAt` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`ReadID`),
  UNIQUE KEY `unique_read` (`MessageID`,`UserID`),
  KEY `UserID` (`UserID`),
  CONSTRAINT `messagereads_ibfk_1` FOREIGN KEY (`MessageID`) REFERENCES `messages` (`MessageID`),
  CONSTRAINT `messagereads_ibfk_2` FOREIGN KEY (`UserID`) REFERENCES `users` (`UserID`)
) ENGINE=InnoDB AUTO_INCREMENT=42 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `messagereads`
--

LOCK TABLES `messagereads` WRITE;
/*!40000 ALTER TABLE `messagereads` DISABLE KEYS */;
INSERT INTO `messagereads` VALUES (1,16,5,'2025-05-27 00:37:42'),(2,18,5,'2025-05-27 00:37:42'),(3,20,5,'2025-05-27 00:37:42'),(4,21,5,'2025-05-27 00:37:42'),(5,22,5,'2025-05-27 00:37:42'),(6,44,5,'2025-05-27 00:37:42'),(7,45,5,'2025-05-27 00:37:42'),(8,46,5,'2025-05-27 00:37:42'),(9,49,5,'2025-05-27 00:37:42'),(10,51,5,'2025-05-27 00:37:42'),(11,52,5,'2025-05-27 00:37:42'),(12,55,5,'2025-05-27 00:37:42'),(13,57,5,'2025-05-27 00:37:42'),(14,58,5,'2025-05-27 00:37:42'),(15,60,5,'2025-05-27 00:37:42'),(16,62,5,'2025-05-27 00:37:42'),(17,63,5,'2025-05-27 00:37:42'),(18,65,5,'2025-05-27 00:37:42'),(19,71,5,'2025-05-27 00:37:42'),(20,72,5,'2025-05-27 00:37:42'),(21,74,5,'2025-05-27 00:37:42'),(22,76,5,'2025-05-27 00:37:42'),(23,77,5,'2025-05-27 00:37:42'),(24,68,5,'2025-05-27 00:37:46'),(25,79,6,'2025-05-27 00:38:26'),(26,84,6,'2025-05-27 00:38:26'),(27,87,6,'2025-05-27 00:38:26'),(28,86,6,'2025-05-27 00:38:28'),(29,88,6,'2025-05-27 00:38:28'),(30,91,5,'2025-05-27 00:38:41'),(31,92,6,'2025-05-27 00:40:31'),(32,85,1,'2025-05-27 00:48:07'),(33,94,1,'2025-05-27 00:48:07'),(34,95,1,'2025-05-27 00:49:19'),(35,96,1,'2025-05-27 00:49:19'),(36,97,1,'2025-05-27 00:49:19'),(37,99,5,'2025-05-27 00:49:49'),(38,100,5,'2025-05-27 00:50:07'),(39,101,1,'2025-05-27 00:57:30'),(40,102,5,'2025-05-27 00:57:37'),(41,103,1,'2025-05-27 00:58:34');
/*!40000 ALTER TABLE `messagereads` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `messages`
--

DROP TABLE IF EXISTS `messages`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `messages` (
  `MessageID` int NOT NULL AUTO_INCREMENT,
  `ChatRoomID` int DEFAULT NULL,
  `SenderID` int DEFAULT NULL,
  `Content` text,
  `SentAt` datetime DEFAULT CURRENT_TIMESTAMP,
  `ImageURL` text,
  PRIMARY KEY (`MessageID`),
  KEY `ChatRoomID` (`ChatRoomID`),
  KEY `SenderID` (`SenderID`),
  CONSTRAINT `messages_ibfk_1` FOREIGN KEY (`ChatRoomID`) REFERENCES `chatrooms` (`ChatRoomID`),
  CONSTRAINT `messages_ibfk_2` FOREIGN KEY (`SenderID`) REFERENCES `users` (`UserID`)
) ENGINE=InnoDB AUTO_INCREMENT=110 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `messages`
--

LOCK TABLES `messages` WRITE;
/*!40000 ALTER TABLE `messages` DISABLE KEYS */;
INSERT INTO `messages` VALUES (15,1,5,'123','2025-05-26 00:53:43',NULL),(16,1,3,'234','2025-05-26 00:53:48',NULL),(17,1,5,'anh duy dep trai qua ','2025-05-26 00:53:55',NULL),(18,1,3,'cảm ơn em','2025-05-26 00:54:04',NULL),(19,1,5,'123','2025-05-26 00:54:50',NULL),(20,1,3,'345','2025-05-26 00:54:54',NULL),(21,1,2,'123','2025-05-26 01:07:11',NULL),(22,1,3,'435','2025-05-26 01:07:14',NULL),(44,1,3,'123','2025-05-26 02:04:38',NULL),(45,1,3,'123','2025-05-26 02:05:57',NULL),(46,1,3,'123','2025-05-26 02:06:09',NULL),(47,1,5,'123','2025-05-26 02:07:04',NULL),(48,1,5,'tao là lâm','2025-05-26 02:08:21',NULL),(49,1,3,'tao là duy','2025-05-26 02:08:43',NULL),(50,1,5,'tao là lâm','2025-05-26 02:09:34',NULL),(51,1,3,'tao là duy ','2025-05-26 02:09:40',NULL),(52,1,3,'mày là ai','2025-05-26 02:11:35',NULL),(53,1,5,'tao là duy','2025-05-26 02:11:47',NULL),(54,1,5,'à không tao là lâm','2025-05-26 02:11:57',NULL),(55,1,3,'tao là duy','2025-05-26 02:12:20',NULL),(56,1,5,'mày là duy ','2025-05-26 02:12:26',NULL),(57,1,3,'đúng rồi ','2025-05-26 02:12:30',NULL),(58,1,3,'123','2025-05-26 02:16:36',NULL),(59,1,5,'123','2025-05-26 02:16:40',NULL),(60,1,3,'345','2025-05-26 02:16:42',NULL),(61,1,5,'lâm','2025-05-26 02:16:46',NULL),(62,1,3,'duy','2025-05-26 02:16:49',NULL),(63,1,3,'345','2025-05-26 02:17:19',NULL),(64,1,5,'123','2025-05-26 02:17:21',NULL),(65,1,3,'123','2025-05-26 02:28:05',NULL),(66,2,5,'alo','2025-05-26 03:10:44',NULL),(67,3,5,'m là manager phải không','2025-05-26 03:13:45',NULL),(68,3,2,'đúng rồi','2025-05-26 03:14:33',NULL),(69,6,3,'123','2025-05-26 04:21:10',NULL),(70,7,3,'mẹ thằng số 3 ','2025-05-26 04:23:02',NULL),(71,1,3,'hẹ hẹ','2025-05-26 04:23:57',NULL),(72,1,3,'chào anh chưa cu ','2025-05-26 04:24:43',NULL),(73,1,5,'em chào anh ạ','2025-05-26 04:24:50',NULL),(74,1,3,'đm th đức anh ','2025-05-26 04:26:23',NULL),(75,1,5,'đm th đức anh ','2025-05-26 04:27:13',NULL),(76,1,3,'đức anh nguu','2025-05-26 04:27:44',NULL),(77,1,3,'đánh nidalee dốt ','2025-05-26 04:27:57',NULL),(78,8,6,'em chào anh duy ạ','2025-05-26 04:29:59',NULL),(79,8,3,'anh chào em','2025-05-26 04:30:10',NULL),(80,8,6,'anh đẹp trai ga lăng học giỏi làm em nứng quá ạ ','2025-05-26 04:30:28',NULL),(81,8,6,'em hâm mộ anh ','2025-05-26 04:30:33',NULL),(82,8,6,'em fan anh lâu lắm rồi ','2025-05-26 04:30:40',NULL),(83,8,6,'vua morderkaiser','2025-05-26 04:30:50',NULL),(84,8,3,'cảm ơn em ','2025-05-26 04:30:56',NULL),(85,5,3,'hello','2025-05-26 11:16:08',NULL),(86,9,5,'địt cụ m','2025-05-26 12:31:19',NULL),(87,8,3,'địt cụ m','2025-05-26 12:31:45',NULL),(88,9,5,'123','2025-05-26 13:47:40',NULL),(89,1,5,'324','2025-05-26 13:47:47',NULL),(90,1,5,'123','2025-05-27 06:19:29',NULL),(91,9,6,'ê','2025-05-27 07:38:31',NULL),(92,9,5,'th ngố','2025-05-27 07:40:28',NULL),(93,9,5,'abcxyz','2025-05-27 07:41:16',NULL),(94,10,5,'123','2025-05-27 07:42:17',NULL),(95,10,5,'123','2025-05-27 07:48:48',NULL),(96,10,5,'avcx','2025-05-27 07:49:03',NULL),(97,10,5,'acs','2025-05-27 07:49:11',NULL),(98,5,1,'acsac','2025-05-27 07:49:23',NULL),(99,10,1,'âcssac','2025-05-27 07:49:44',NULL),(100,10,1,'ácvfds','2025-05-27 07:49:53',NULL),(101,10,5,'vsdvdf','2025-05-27 07:50:12',NULL),(102,10,1,'123','2025-05-27 07:50:19',NULL),(103,10,5,'123','2025-05-27 07:57:39',NULL),(104,10,1,'avdsvf','2025-05-27 07:58:36',NULL),(105,10,1,'123456','2025-05-27 07:59:57',NULL),(106,10,1,'123','2025-05-27 08:00:46',NULL),(107,10,1,'123123','2025-05-27 08:03:59',NULL),(108,10,1,'12312321','2025-05-27 08:04:44',NULL),(109,10,1,'12312','2025-05-27 08:04:48',NULL);
/*!40000 ALTER TABLE `messages` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `orderdetails`
--

DROP TABLE IF EXISTS `orderdetails`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `orderdetails` (
  `OrderDetailID` int NOT NULL AUTO_INCREMENT,
  `OrderID` int DEFAULT NULL,
  `CourseID` int DEFAULT NULL,
  `Price` decimal(10,2) DEFAULT NULL,
  PRIMARY KEY (`OrderDetailID`),
  KEY `OrderID` (`OrderID`),
  KEY `CourseID` (`CourseID`),
  CONSTRAINT `orderdetails_ibfk_1` FOREIGN KEY (`OrderID`) REFERENCES `orders` (`OrderID`),
  CONSTRAINT `orderdetails_ibfk_2` FOREIGN KEY (`CourseID`) REFERENCES `courses` (`CourseID`)
) ENGINE=InnoDB AUTO_INCREMENT=30 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `orderdetails`
--

LOCK TABLES `orderdetails` WRITE;
/*!40000 ALTER TABLE `orderdetails` DISABLE KEYS */;
INSERT INTO `orderdetails` VALUES (1,1,1,799.00),(2,2,9,1234.00),(4,2,1,799.00),(5,2,3,999.00),(6,3,9,1234.00),(7,4,9,1234.00),(9,5,3,999.00),(10,5,9,1234.00),(11,6,9,1234.00),(13,6,7,5000.00),(14,6,4,890.00),(15,7,1,799.00),(17,9,3,999.00),(18,10,4,890.00),(19,11,4,890.00),(20,12,42,1299.00),(21,13,6,1299.00),(22,14,3,999.00),(23,15,48,1399.00),(24,15,44,899.00),(25,16,44,899.00),(26,17,44,899.00),(27,18,5,490.00),(28,19,5,490.00),(29,20,44,899.00);
/*!40000 ALTER TABLE `orderdetails` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `orders`
--

DROP TABLE IF EXISTS `orders`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `orders` (
  `OrderID` int NOT NULL AUTO_INCREMENT,
  `UserID` int DEFAULT NULL,
  `OrderDate` datetime DEFAULT CURRENT_TIMESTAMP,
  `TotalAmount` decimal(10,2) DEFAULT NULL,
  `PaymentStatus` varchar(20) DEFAULT NULL,
  `PaymentMethod` varchar(20) DEFAULT NULL,
  PRIMARY KEY (`OrderID`),
  KEY `UserID` (`UserID`),
  CONSTRAINT `orders_ibfk_1` FOREIGN KEY (`UserID`) REFERENCES `users` (`UserID`)
) ENGINE=InnoDB AUTO_INCREMENT=21 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `orders`
--

LOCK TABLES `orders` WRITE;
/*!40000 ALTER TABLE `orders` DISABLE KEYS */;
INSERT INTO `orders` VALUES (1,4,'2025-05-18 22:07:32',799.00,'unpaid','VNPay'),(2,2,'2025-05-18 22:18:14',8032.00,'unpaid','vnpay'),(3,2,'2025-05-18 22:19:02',1234.00,'unpaid','vnpay'),(4,2,'2025-05-19 00:28:01',1234.00,'unpaid','vnpay'),(5,2,'2025-05-19 00:41:56',7233.00,'paid','vnpay'),(6,2,'2025-05-19 05:38:36',12124.00,'paid','VNPay'),(7,5,'2025-05-23 02:34:08',799.00,'paid','VNPay'),(8,5,'2025-05-23 02:34:14',5000.00,'paid','VNPay'),(9,5,'2025-05-23 02:34:20',999.00,'paid','Momo'),(10,5,'2025-05-23 02:34:26',890.00,'paid','VNPay'),(11,5,'2025-05-23 07:05:44',890.00,'paid','VNPay'),(12,5,'2025-05-23 07:08:32',1299.00,'paid','VNPay'),(13,5,'2025-05-23 19:21:59',1299.00,'paid','VNPay'),(14,5,'2025-05-23 19:43:00',999.00,'pending','VNPay'),(15,5,'2025-05-23 19:43:54',2298.00,'pending','VNPay'),(16,5,'2025-05-23 21:15:30',899.00,'pending','VNPay'),(17,5,'2025-05-23 21:15:44',899.00,'unpaid','VNPay'),(18,2,'2025-05-24 04:02:58',490.00,'paid','VNPay'),(19,5,'2025-05-24 04:04:15',490.00,'paid','VNPay'),(20,5,'2025-05-24 13:22:33',899.00,'pending','VNPay');
/*!40000 ALTER TABLE `orders` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `payments`
--

DROP TABLE IF EXISTS `payments`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `payments` (
  `PaymentID` int NOT NULL AUTO_INCREMENT,
  `OrderID` int DEFAULT NULL,
  `Amount` decimal(10,2) DEFAULT NULL,
  `PaymentMethod` varchar(50) DEFAULT NULL,
  `PaymentDate` datetime DEFAULT CURRENT_TIMESTAMP,
  `PaymentStatus` varchar(50) DEFAULT NULL,
  `TransactionCode` varchar(100) DEFAULT NULL,
  PRIMARY KEY (`PaymentID`),
  KEY `OrderID` (`OrderID`),
  CONSTRAINT `payments_ibfk_1` FOREIGN KEY (`OrderID`) REFERENCES `orders` (`OrderID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `payments`
--

LOCK TABLES `payments` WRITE;
/*!40000 ALTER TABLE `payments` DISABLE KEYS */;
/*!40000 ALTER TABLE `payments` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `questions`
--

DROP TABLE IF EXISTS `questions`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `questions` (
  `QuestionID` int NOT NULL AUTO_INCREMENT,
  `QuizID` int DEFAULT NULL,
  `Content` varchar(500) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci DEFAULT NULL,
  `ImageURL` text,
  PRIMARY KEY (`QuestionID`),
  KEY `QuizID` (`QuizID`),
  CONSTRAINT `questions_ibfk_1` FOREIGN KEY (`QuizID`) REFERENCES `quizzes` (`QuizID`)
) ENGINE=InnoDB AUTO_INCREMENT=187 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `questions`
--

LOCK TABLES `questions` WRITE;
/*!40000 ALTER TABLE `questions` DISABLE KEYS */;
INSERT INTO `questions` VALUES (16,1,'What is React?',NULL),(17,1,'What is JSX? 123',NULL),(24,2,'123',NULL),(25,2,'gfsd',NULL),(26,2,'','fdsfds'),(27,3,'123',NULL),(35,7,'What is Node.js?',NULL),(36,7,'Which command checks the Node.js version?',NULL),(37,7,'What is NPM?',NULL),(38,19,'What is Angular primarily used for?',NULL),(39,19,'Which company develops and maintains Angular?',NULL),(40,19,'What programming language is Angular based on?',NULL),(41,22,'What is the main advantage of Vue.js?',NULL),(42,22,'Which API was introduced in Vue 3?',NULL),(43,23,'What type of database is MongoDB?',NULL),(44,23,'What format does MongoDB use to store data?',NULL),(45,25,'123',NULL),(100,65,'What does HTML stand for?',NULL),(101,65,'Which technology is used for styling web pages?',NULL),(102,65,'What programming language adds interactivity to web pages?',NULL),(103,66,'Which tag is used to create a paragraph in HTML?',NULL),(104,66,'What is the correct HTML tag for creating a hyperlink?',NULL),(105,66,'Which HTML tag is used for the largest heading?',NULL),(106,67,'How do you select an element with id \"header\" in CSS?',NULL),(107,67,'Which property is used to change the background color?',NULL),(108,67,'What does CSS stand for?',NULL),(109,68,'How do you declare a variable in JavaScript?',NULL),(110,68,'Which method is used to add an element to an array?',NULL),(111,68,'What is the correct way to create a function in JavaScript?',NULL),(112,69,'What does DOM stand for?',NULL),(113,69,'Which method is used to select an element by its ID?',NULL),(114,69,'How do you change the text content of an element?',NULL),(115,70,'Which event is triggered when a user clicks on an element?',NULL),(116,70,'How do you add an event listener to an element?',NULL),(117,70,'What is event bubbling?',NULL),(118,71,'What does AJAX stand for?',NULL),(119,71,'Which HTTP method is used to retrieve data?',NULL),(120,71,'What format is commonly used for API responses?',NULL),(121,72,'What is responsive web design?',NULL),(122,72,'Which CSS unit is relative to the viewport width?',NULL),(123,72,'What is a media query used for?',NULL),(124,73,'What is Bootstrap?',NULL),(125,73,'Which class is used to create a container in Bootstrap?',NULL),(126,73,'How many columns are in a Bootstrap grid system?',NULL),(127,74,'What is jQuery?',NULL),(128,74,'Which symbol is used as a shortcut for jQuery?',NULL),(129,74,'How do you select all paragraphs in jQuery?',NULL),(130,75,'What is Git?',NULL),(131,75,'Which command initializes a new Git repository?',NULL),(132,75,'What does \"git commit\" do?',NULL),(133,76,'What is GitHub?',NULL),(134,76,'What is a pull request?',NULL),(135,76,'Which command pushes changes to a remote repository?',NULL),(136,77,'What is unit testing?',NULL),(137,77,'Which testing approach tests the entire application?',NULL),(138,77,'What is Test-Driven Development (TDD)?',NULL),(139,78,'What is debugging?',NULL),(140,78,'Which browser tool is commonly used for debugging JavaScript?',NULL),(141,78,'What is a breakpoint?',NULL),(142,79,'What does DevOps stand for?',NULL),(143,79,'What is the main goal of DevOps?',NULL),(144,79,'Which practice involves frequent code integration?',NULL),(145,80,'What does CI/CD stand for?',NULL),(146,80,'What is the purpose of automated testing in CI/CD?',NULL),(147,80,'Which tool is commonly used for CI/CD?',NULL),(148,81,'What is container orchestration?',NULL),(149,81,'Which tool is the most popular for container orchestration?',NULL),(150,81,'What is a pod in Kubernetes?',NULL),(151,82,'What is machine learning?',NULL),(152,82,'Which type of learning uses labeled data?',NULL),(153,82,'What is a neural network?',NULL),(154,83,'What is data science?',NULL),(155,83,'Which Python library is popular for data analysis?',NULL),(156,83,'What is data visualization?',NULL),(157,84,'What is model deployment?',NULL),(158,84,'Which platform is commonly used for cloud deployment?',NULL),(159,84,'What is model monitoring?',NULL),(160,85,'What is mobile app development?',NULL),(161,85,'Which language is used for native iOS development?',NULL),(162,85,'What is the difference between native and hybrid apps?',NULL),(163,86,'What is cross-platform development?',NULL),(164,86,'Which framework allows building apps for both iOS and Android?',NULL),(165,86,'What is React Native?',NULL),(166,87,'What is required to publish an app on Google Play Store?',NULL),(167,87,'What is app store optimization (ASO)?',NULL),(168,87,'Which file format is used for Android apps?',NULL),(169,88,'What is cloud computing?',NULL),(170,88,'Which are the main cloud service models?',NULL),(171,88,'What is the difference between public and private cloud?',NULL),(172,89,'What is Amazon EC2?',NULL),(173,89,'What is Amazon S3 used for?',NULL),(174,89,'What is AWS Lambda?',NULL),(175,90,'What is serverless computing?',NULL),(176,90,'What are the benefits of serverless architecture?',NULL),(177,90,'Which AWS service provides serverless computing?',NULL),(178,91,'What is an API?',NULL),(179,91,'What does REST stand for?',NULL),(180,91,'Which HTTP status code indicates success?',NULL),(181,92,'What is a GraphQL resolver?',NULL),(182,92,'What is the difference between Query and Mutation?',NULL),(183,92,'What is GraphQL subscription?',NULL),(184,93,'What is full-stack development?',NULL),(185,93,'What components make up a typical web application stack?',NULL),(186,93,'What is the MEAN stack?',NULL);
/*!40000 ALTER TABLE `questions` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `quizzes`
--

DROP TABLE IF EXISTS `quizzes`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `quizzes` (
  `QuizID` int NOT NULL AUTO_INCREMENT,
  `LessonID` int DEFAULT NULL,
  `Title` varchar(255) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci DEFAULT NULL,
  PRIMARY KEY (`QuizID`),
  KEY `LessonID` (`LessonID`),
  CONSTRAINT `quizzes_ibfk_1` FOREIGN KEY (`LessonID`) REFERENCES `lessons` (`LessonID`)
) ENGINE=InnoDB AUTO_INCREMENT=94 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `quizzes`
--

LOCK TABLES `quizzes` WRITE;
/*!40000 ALTER TABLE `quizzes` DISABLE KEYS */;
INSERT INTO `quizzes` VALUES (1,1,'Quiz for Lesson 1'),(2,2,'123'),(3,3,'Lam dep zai'),(7,7,'Node.js Basics Quiz'),(8,8,'Express.js Quiz'),(9,9,'MySQL Integration Quiz'),(10,10,'Python Fundamentals Quiz'),(11,11,'Functions and Modules Quiz'),(12,12,'OOP in Python Quiz'),(13,13,'SQL Queries Quiz'),(14,14,'Database Design Quiz'),(15,15,'Advanced MySQL Quiz'),(16,16,'Spring Boot Basics Quiz'),(17,17,'REST API Quiz'),(18,18,'Spring Security Quiz'),(19,39,'Angular Basics Quiz'),(20,40,'Angular Components Quiz'),(21,41,'Data Binding Quiz'),(22,42,'Vue.js Fundamentals Quiz'),(23,43,'MongoDB Concepts Quiz'),(24,44,'Docker Fundamentals Quiz'),(25,24,'duy'),(29,48,'Node.js Installation Quiz'),(30,49,'JavaScript Review Quiz'),(31,50,'First Server Quiz'),(32,51,'React Introduction Quiz'),(33,52,'JSX and Components Quiz'),(34,53,'State and Props Quiz'),(45,64,'Vue Components Quiz'),(46,65,'Vue Router Quiz'),(47,66,'MongoDB Installation Quiz'),(48,67,'CRUD Operations Quiz'),(49,68,'MongoDB Indexing Quiz'),(50,69,'Docker Installation Quiz'),(51,70,'Dockerfile Quiz'),(52,71,'Kubernetes Quiz'),(53,72,'ML Introduction Quiz'),(57,76,'Flutter Widgets Quiz'),(58,77,'Flutter Navigation Quiz'),(59,78,'AWS Setup Quiz'),(63,82,'GraphQL Schema Quiz'),(64,83,'GraphQL Database Quiz'),(65,25,'Web Development Fundamentals Quiz'),(66,26,'HTML Basics Quiz'),(67,27,'CSS Styling Quiz'),(68,28,'JavaScript Essentials Quiz'),(69,29,'DOM Manipulation Quiz'),(70,30,'Event Handling Quiz'),(71,31,'AJAX and APIs Quiz'),(72,32,'Responsive Design Quiz'),(73,33,'Bootstrap Framework Quiz'),(74,34,'jQuery Library Quiz'),(75,35,'Git Version Control Quiz'),(76,36,'GitHub Collaboration Quiz'),(77,37,'Testing Fundamentals Quiz'),(78,38,'Debugging Techniques Quiz'),(79,69,'DevOps Basics Quiz'),(80,70,'CI/CD Pipeline Quiz'),(81,71,'Container Orchestration Quiz'),(82,72,'Machine Learning Fundamentals Quiz'),(83,73,'Data Science Essentials Quiz'),(84,74,'Model Deployment Quiz'),(85,75,'Mobile Development Quiz'),(86,76,'Cross-Platform Development Quiz'),(87,77,'App Store Deployment Quiz'),(88,78,'Cloud Computing Basics Quiz'),(89,79,'AWS Services Quiz'),(90,80,'Serverless Architecture Quiz'),(91,81,'API Design Quiz'),(92,82,'GraphQL Advanced Quiz'),(93,83,'Full-Stack Integration Quiz');
/*!40000 ALTER TABLE `quizzes` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `roles`
--

DROP TABLE IF EXISTS `roles`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `roles` (
  `RoleID` int NOT NULL AUTO_INCREMENT,
  `RoleName` varchar(50) DEFAULT NULL,
  PRIMARY KEY (`RoleID`),
  UNIQUE KEY `RoleName` (`RoleName`)
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `roles`
--

LOCK TABLES `roles` WRITE;
/*!40000 ALTER TABLE `roles` DISABLE KEYS */;
INSERT INTO `roles` VALUES (1,'Admin'),(2,'Course Manager'),(3,'Instructor'),(4,'Student');
/*!40000 ALTER TABLE `roles` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `useranswers`
--

DROP TABLE IF EXISTS `useranswers`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `useranswers` (
  `AttemptID` int NOT NULL,
  `QuestionID` int NOT NULL,
  `SelectedOptionID` int DEFAULT NULL,
  PRIMARY KEY (`AttemptID`,`QuestionID`),
  KEY `QuestionID` (`QuestionID`),
  KEY `SelectedOptionID` (`SelectedOptionID`),
  CONSTRAINT `useranswers_ibfk_1` FOREIGN KEY (`AttemptID`) REFERENCES `userquizattempts` (`AttemptID`),
  CONSTRAINT `useranswers_ibfk_2` FOREIGN KEY (`QuestionID`) REFERENCES `questions` (`QuestionID`),
  CONSTRAINT `useranswers_ibfk_3` FOREIGN KEY (`SelectedOptionID`) REFERENCES `answeroptions` (`OptionID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `useranswers`
--

LOCK TABLES `useranswers` WRITE;
/*!40000 ALTER TABLE `useranswers` DISABLE KEYS */;
INSERT INTO `useranswers` VALUES (2,38,76),(3,38,76),(4,38,76),(5,38,76),(6,38,76),(7,38,76),(8,38,77),(9,38,77),(2,39,81),(3,39,81),(4,39,81),(5,39,81),(6,39,81),(7,39,82),(8,39,82),(9,39,83),(5,40,84),(8,40,84),(2,40,85),(3,40,85),(4,40,85),(6,40,85),(9,40,85),(7,40,87),(10,45,106);
/*!40000 ALTER TABLE `useranswers` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `userquizattempts`
--

DROP TABLE IF EXISTS `userquizattempts`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `userquizattempts` (
  `AttemptID` int NOT NULL AUTO_INCREMENT,
  `UserID` int DEFAULT NULL,
  `QuizID` int DEFAULT NULL,
  `Score` float DEFAULT NULL,
  `AttemptDate` datetime DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`AttemptID`),
  KEY `UserID` (`UserID`),
  KEY `QuizID` (`QuizID`),
  CONSTRAINT `userquizattempts_ibfk_1` FOREIGN KEY (`UserID`) REFERENCES `users` (`UserID`),
  CONSTRAINT `userquizattempts_ibfk_2` FOREIGN KEY (`QuizID`) REFERENCES `quizzes` (`QuizID`)
) ENGINE=InnoDB AUTO_INCREMENT=11 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `userquizattempts`
--

LOCK TABLES `userquizattempts` WRITE;
/*!40000 ALTER TABLE `userquizattempts` DISABLE KEYS */;
INSERT INTO `userquizattempts` VALUES (2,5,19,0,'2025-05-24 04:41:48'),(3,5,19,0,'2025-05-25 00:02:26'),(4,5,19,100,'2025-05-25 00:04:13'),(5,5,19,66.6667,'2025-05-25 00:04:19'),(6,5,19,100,'2025-05-25 00:27:19'),(7,5,19,33.3333,'2025-05-25 00:27:37'),(8,5,19,0,'2025-05-25 07:59:00'),(9,5,19,33.3333,'2025-05-25 07:59:15'),(10,5,25,100,'2025-05-26 13:10:10');
/*!40000 ALTER TABLE `userquizattempts` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `userroles`
--

DROP TABLE IF EXISTS `userroles`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `userroles` (
  `UserID` int NOT NULL,
  `RoleID` int NOT NULL,
  PRIMARY KEY (`UserID`,`RoleID`),
  KEY `RoleID` (`RoleID`),
  CONSTRAINT `userroles_ibfk_1` FOREIGN KEY (`UserID`) REFERENCES `users` (`UserID`),
  CONSTRAINT `userroles_ibfk_2` FOREIGN KEY (`RoleID`) REFERENCES `roles` (`RoleID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `userroles`
--

LOCK TABLES `userroles` WRITE;
/*!40000 ALTER TABLE `userroles` DISABLE KEYS */;
INSERT INTO `userroles` VALUES (1,1),(2,2),(3,3),(4,3),(5,4),(6,4);
/*!40000 ALTER TABLE `userroles` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `users`
--

DROP TABLE IF EXISTS `users`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `users` (
  `UserID` int NOT NULL AUTO_INCREMENT,
  `Email` varchar(100) NOT NULL,
  `PasswordHash` varchar(255) NOT NULL,
  `FullName` varchar(100) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci DEFAULT NULL,
  `CreatedAt` datetime DEFAULT CURRENT_TIMESTAMP,
  `AvatarURL` text,
  `Address` varchar(255) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci DEFAULT NULL,
  `PhoneNumber` varchar(20) DEFAULT NULL,
  `DateOfBirth` date DEFAULT NULL,
  `Occupation` varchar(100) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci DEFAULT NULL,
  `Gender` varchar(10) DEFAULT NULL,
  PRIMARY KEY (`UserID`),
  UNIQUE KEY `Email` (`Email`)
) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `users`
--

LOCK TABLES `users` WRITE;
/*!40000 ALTER TABLE `users` DISABLE KEYS */;
INSERT INTO `users` VALUES (1,'admin@gmail.com','$2b$10$oPssRcRptDAgwBDPgWYBg.l7QFcy54yDHNIphcLqWRt/oKsC9jngO','Duy Admin','2025-05-17 15:33:52',NULL,NULL,NULL,NULL,NULL,NULL),(2,'manager@gmail.com','$2b$10$zISsku638SoauxSpI6AcB.4MU7z/wBFtlq9U22Cv.ggKSM11xgK6.','Duy Manager','2025-05-17 15:33:57',NULL,NULL,NULL,NULL,NULL,NULL),(3,'Duyhvhe176251@fpt.edu','$2b$10$h/3kusCRXHiSWjxnpZJwQeImo4Na.QSzE4uhp4Xs8fznLnQH9waFi','Duy Instructor 1','2025-05-17 15:34:12',NULL,NULL,NULL,NULL,NULL,NULL),(4,'duyha8618@gmail.com','$2b$10$4BAGG9rjRIk2iV/r4E9fmOxPnsh3NNlnROpHa3.TtCGv36QHwjXtC','Duy Instructor 2','2025-05-18 02:14:40',NULL,NULL,NULL,NULL,NULL,NULL),(5,'duyakali12@gmail.com','$2b$10$ovWTZjuOEcepatigkXdhqOIKTWXWnFPseFuLgSp7mErQQ6jZ2O1g6','Lâm','2025-05-22 01:28:39',NULL,NULL,NULL,NULL,NULL,NULL),(6,'duy123@gmail.com','$2b$10$IwKVSEIxl.vevuIGKrDj2uyOpuY5BJq9EaUpLqCJykWTdytzpQb0G','Xuân Dương','2025-05-26 04:28:57',NULL,NULL,NULL,NULL,NULL,NULL);
/*!40000 ALTER TABLE `users` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2025-05-27 15:20:59
