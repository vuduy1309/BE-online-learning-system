{"version":3,"sources":["../src/constants/response-map.constant.ts","../src/constants/api-endpoint.constant.ts","../src/constants/ipn-result-for-vnpay.constant.ts","../src/constants/regex.constant.ts","../src/constants/index.ts","../src/enums/product-code.enum.ts","../src/enums/index.ts","../src/utils/common.ts","../src/utils/logger.ts","../src/utils/payment.util.ts","../src/services/logger.service.ts","../src/services/payment.service.ts","../src/services/query.service.ts","../src/services/verification.service.ts","../src/vnpay.ts"],"names":["WRONG_CHECKSUM_KEY","RESPONSE_MAP","QUERY_DR_RESPONSE_MAP","REFUND_RESPONSE_MAP","TRANSACTION_STATUS_RESPONSE_MAP","VNPAY_GATEWAY_SANDBOX_HOST","PAYMENT_ENDPOINT","QUERY_DR_REFUND_ENDPOINT","GET_BANK_LIST_ENDPOINT","IpnSuccess","IpnOrderNotFound","InpOrderAlreadyConfirmed","IpnIpProhibited","IpnInvalidAmount","IpnFailChecksum","IpnUnknownError","numberRegex","VNP_VERSION","VNP_DEFAULT_COMMAND","CURR_CODE_VND","ProductCode","UrlService","HashAlgorithm","VnpCurrCode","VnpLocale","VnpCardType","VnpTransactionType","RefundTransactionType","dayjs","utc","timezone","getDateInGMT7","date","inputDate","utcDate","dateFormat","format","pad","n","year","month","day","hour","minute","second","parseDate","dateNumber","tz","dateString","_parseInt","formattedDate","localDate","isValidVnpayDateFormat","generateRandomString","length","options","result","characters","charactersLength","getResponseByStatusCode","responseCode","locale","responseMap","resolveUrlString","host","path","trimmedHost","trimmedPath","hash","secret","data","algorithm","crypto","ignoreLogger","consoleLogger","symbol","fileLogger","filePath","errorCallback","dataString","err","buildPaymentUrlSearchParams","params","sortedKeys","key","createPaymentUrl","config","paymentEndpoint","redirectUrl","searchParams","calculateSecureHash","secureSecret","hashAlgorithm","bufferEncode","verifySecureHash","receivedHash","LoggerService","isEnabled","customLoggerFn","methodName","logData","type","fields","keyAssert","PaymentService","logger","dataToBuild","timeGMT7","signed","data2Log","cloneUrl","QueryService","query","command","dataQuery","queryEndpoint","url","stringToCreateHash","requestHashed","body","response","responseData","message","outputResults","stringToCreateHashOfResponse","responseHashed","vnp_Command","DEFAULT_TRANSACTION_NO_IF_NOT_EXIST","vnp_Version","vnp_TmnCode","vnp_RequestId","vnp_TransactionType","vnp_TxnRef","vnp_TransactionNo","vnp_TransactionDate","vnp_CreateBy","vnp_CreateDate","vnp_IpAddr","vnp_OrderInfo","refundEndpoint","stringToHashOfRequest","VerificationService","vnp_SecureHash","vnp_SecureHashType","cloneQuery","isVerified","silentOptions","VNPay","vnpayHost","vnp_CurrCode","vnp_Locale","testMode","endpoints","initializedEndpoints","bankList","bank"],"mappings":"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","file":"index.js","sourcesContent":["import type { VnpLocale } from '../enums';\n\nexport const WRONG_CHECKSUM_KEY = 'WRONG_CHECKSUM_KEY';\n\nexport const RESPONSE_MAP = new Map<string, Record<VnpLocale, string>>([\n    ['00', { vn: 'Giao dịch thành công', en: 'Approved' }],\n    ['01', { vn: 'Giao dịch đã tồn tại', en: 'Transaction is already exist' }],\n    [\n        '02',\n        {\n            vn: 'Merchant không hợp lệ (kiểm tra lại vnp_TmnCode)',\n            en: 'Invalid merchant (check vnp_TmnCode value)',\n        },\n    ],\n    [\n        '03',\n        {\n            vn: 'Dữ liệu gửi sang không đúng định dạng',\n            en: 'Sent data is not in the right format',\n        },\n    ],\n    [\n        '04',\n        {\n            vn: 'Khởi tạo GD không thành công do Website đang bị tạm khoá',\n            en: 'Payment website is not available',\n        },\n    ],\n    [\n        '05',\n        {\n            vn: 'Giao dịch không thành công do: Quý khách nhập sai mật khẩu thanh toán quá số lần quy định. Xin quý khách vui lòng thực hiện lại giao dịch',\n            en: 'Transaction failed: Too many wrong password input',\n        },\n    ],\n    [\n        '06',\n        {\n            vn: 'Giao dịch không thành công do Quý khách nhập sai mật khẩu xác thực giao dịch (OTP). Xin quý khách vui lòng thực hiện lại giao dịch.',\n            en: 'Transaction failed: Wrong OTP input',\n        },\n    ],\n    [\n        '07',\n        {\n            vn: 'Trừ tiền thành công. Giao dịch bị nghi ngờ (liên quan tới lừa đảo, giao dịch bất thường). Đối với giao dịch này cần merchant xác nhận thông qua merchant admin: Từ chối/Đồng ý giao dịch',\n            en: 'This transaction is suspicious',\n        },\n    ],\n    [\n        '08',\n        {\n            vn: 'Giao dịch không thành công do: Hệ thống Ngân hàng đang bảo trì. Xin quý khách tạm thời không thực hiện giao dịch bằng thẻ/tài khoản của Ngân hàng này.',\n            en: 'Transaction failed: The banking system is under maintenance. Please do not temporarily make transactions by card / account of this Bank.',\n        },\n    ],\n    [\n        '09',\n        {\n            vn: 'Giao dịch không thành công do: Thẻ/Tài khoản của khách hàng chưa đăng ký dịch vụ InternetBanking tại ngân hàng.',\n            en: 'Transaction failed: Cards / accounts of customer who has not yet registered for Internet Banking service.',\n        },\n    ],\n    [\n        '10',\n        {\n            vn: 'Giao dịch không thành công do: Khách hàng xác thực thông tin thẻ/tài khoản không đúng quá 3 lần',\n            en: 'Transaction failed: Customer incorrectly validate the card / account information more than 3 times',\n        },\n    ],\n    [\n        '11',\n        {\n            vn: 'Giao dịch không thành công do: Đã hết hạn chờ thanh toán. Xin quý khách vui lòng thực hiện lại giao dịch.',\n            en: 'Transaction failed: Pending payment is expired. Please try again.',\n        },\n    ],\n    [\n        '24',\n        {\n            vn: 'Giao dịch không thành công do: Khách hàng hủy giao dịch',\n            en: 'Transaction canceled',\n        },\n    ],\n    [\n        '51',\n        {\n            vn: 'Giao dịch không thành công do: Tài khoản của quý khách không đủ số dư để thực hiện giao dịch.',\n            en: 'Transaction failed: Your account is not enough balance to make the transaction.',\n        },\n    ],\n    [\n        '65',\n        {\n            vn: 'Giao dịch không thành công do: Tài khoản của Quý khách đã vượt quá hạn mức giao dịch trong ngày.',\n            en: 'Transaction failed: Your account has exceeded the daily limit.',\n        },\n    ],\n    [\n        '75',\n        {\n            vn: 'Ngân hàng thanh toán đang bảo trì',\n            en: 'Banking system is under maintenance',\n        },\n    ],\n    [WRONG_CHECKSUM_KEY, { vn: 'Sai checksum', en: 'Wrong checksum' }],\n    ['default', { vn: 'Giao dịch thất bại', en: 'Failure' }],\n]);\n\nexport const QUERY_DR_RESPONSE_MAP = new Map<string, Record<VnpLocale, string>>([\n    ['00', { vn: 'Yêu cầu thành công', en: 'Success' }],\n    [\n        '02',\n        {\n            vn: 'Mã định danh kết nối không hợp lệ (kiểm tra lại TmnCode)',\n            en: 'Invalid connection identifier (check TmnCode)',\n        },\n    ],\n    [\n        '03',\n        {\n            vn: 'Dữ liệu gửi sang không đúng định dạng',\n            en: 'Sent data is not in the right format',\n        },\n    ],\n    [\n        '91',\n        {\n            vn: 'Không tìm thấy giao dịch yêu cầu',\n            en: 'Transaction not found for request',\n        },\n    ],\n    [\n        '94',\n        {\n            vn: 'Yêu cầu trùng lặp, duplicate request trong thời gian giới hạn của API',\n            en: 'Duplicate request within the time limit of the API',\n        },\n    ],\n    [\n        '97',\n        {\n            vn: 'Checksum không hợp lệ',\n            en: 'Invalid checksum',\n        },\n    ],\n    [\n        '99',\n        {\n            vn: 'Các lỗi khác (lỗi còn lại, không có trong danh sách mã lỗi đã liệt kê)',\n            en: 'Other errors (remaining errors, not in the list of error codes listed)',\n        },\n    ],\n    [WRONG_CHECKSUM_KEY, { vn: 'Sai checksum', en: 'Wrong checksum' }],\n    ['default', { vn: 'Giao dịch thất bại', en: 'Failure' }],\n]);\n\nexport const REFUND_RESPONSE_MAP = new Map<string, Record<VnpLocale, string>>([\n    ['00', { vn: 'Yêu cầu thành công', en: 'Success' }],\n    [\n        '02',\n        {\n            vn: 'Mã định danh kết nối không hợp lệ (kiểm tra lại TmnCode)',\n            en: 'Invalid connection identifier (check TmnCode)',\n        },\n    ],\n    [\n        '03',\n        {\n            vn: 'Dữ liệu gửi sang không đúng định dạng',\n            en: 'Sent data is not in the right format',\n        },\n    ],\n    [\n        '91',\n        {\n            vn: 'Không tìm thấy giao dịch yêu cầu hoàn trả',\n            en: 'Transaction not found for request refund',\n        },\n    ],\n    [\n        '94',\n        {\n            vn: 'Giao dịch đã được gửi yêu cầu hoàn tiền trước đó. Yêu cầu này VNPAY đang xử lý',\n            en: 'The transaction has been sent a refund request before. VNPAY is processing this request',\n        },\n    ],\n    [\n        '95',\n        {\n            vn: 'Giao dịch này không thành công bên VNPAY. VNPAY từ chối xử lý yêu cầu',\n            en: 'This transaction is not successful from VNPAY. VNPAY refuses to process the request',\n        },\n    ],\n    [\n        '97',\n        {\n            vn: 'Checksum không hợp lệ',\n            en: 'Invalid checksum',\n        },\n    ],\n    [\n        '99',\n        {\n            vn: 'Các lỗi khác (lỗi còn lại, không có trong danh sách mã lỗi đã liệt kê)',\n            en: 'Other errors (remaining errors, not in the list of error codes listed)',\n        },\n    ],\n    [WRONG_CHECKSUM_KEY, { vn: 'Sai checksum', en: 'Wrong checksum' }],\n    ['default', { vn: 'Giao dịch thất bại', en: 'Failure' }],\n]);\n\nexport const TRANSACTION_STATUS_RESPONSE_MAP = new Map<string, Record<VnpLocale, string>>([\n    ['00', { vn: 'Giao dịch thanh toán thành công', en: 'Payment transaction successful' }],\n    ['01', { vn: 'Giao dịch chưa hoàn tất', en: 'Transaction not completed' }],\n    [\n        '02',\n        {\n            vn: 'Giao dịch bị lỗi',\n            en: 'Transaction error',\n        },\n    ],\n    [\n        '04',\n        {\n            vn: 'Giao dịch đảo (Khách hàng đã bị trừ tiền tại Ngân hàng nhưng GD chưa thành công ở VNPAY)',\n            en: 'Transaction reverse (Customer has been deducted money at the Bank but the transaction is not successful at VNPAY)',\n        },\n    ],\n    [\n        '05',\n        {\n            vn: 'VNPAY đang xử lý giao dịch này (GD hoàn tiền)',\n            en: 'VNPAY is processing this transaction (refund)',\n        },\n    ],\n    [\n        '06',\n        {\n            vn: 'VNPAY đã gửi yêu cầu hoàn tiền sang Ngân hàng (GD hoàn tiền)',\n            en: 'VNPAY has sent a refund request to the Bank (refund)',\n        },\n    ],\n    [\n        '07',\n        {\n            vn: 'Giao dịch bị nghi ngờ gian lận',\n            en: 'Transaction suspected of fraud',\n        },\n    ],\n    [\n        '09',\n        {\n            vn: 'GD Hoàn trả bị từ chối',\n            en: 'Refund transaction is rejected',\n        },\n    ],\n    [WRONG_CHECKSUM_KEY, { vn: 'Sai checksum', en: 'Wrong checksum' }],\n]);\n","export const VNPAY_GATEWAY_SANDBOX_HOST = 'https://sandbox.vnpayment.vn';\n\nexport const PAYMENT_ENDPOINT = 'paymentv2/vpcpay.html';\nexport const QUERY_DR_REFUND_ENDPOINT = 'merchant_webapi/api/transaction';\nexport const GET_BANK_LIST_ENDPOINT = 'qrpayauth/api/merchant/get_bank_list';\n","/**\n * The response must to be sent to VNPAY after receiving the IPN request\n */\nexport type IpnResponse = {\n    RspCode: string;\n    Message: string;\n};\n\nexport const IpnSuccess: IpnResponse = {\n    RspCode: '00',\n    Message: 'Confirm Success',\n};\n\nexport const IpnOrderNotFound: IpnResponse = {\n    RspCode: '01',\n    Message: 'Order not found',\n};\n\nexport const InpOrderAlreadyConfirmed: IpnResponse = {\n    RspCode: '02',\n    Message: 'Order already confirmed',\n};\n\nexport const IpnIpProhibited: IpnResponse = {\n    RspCode: '03',\n    Message: 'IP prohibited',\n};\n\nexport const IpnInvalidAmount: IpnResponse = {\n    RspCode: '04',\n    Message: 'Invalid amount',\n};\n\nexport const IpnFailChecksum: IpnResponse = {\n    RspCode: '97',\n    Message: 'Fail checksum',\n};\n\nexport const IpnUnknownError: IpnResponse = {\n    RspCode: '99',\n    Message: 'Unknown error',\n};\n","export const numberRegex = /^[0-9]+$/;\n","export * from './response-map.constant';\nexport * from './api-endpoint.constant';\nexport * from './ipn-result-for-vnpay.constant';\nexport * from './regex.constant';\n\nexport const VNP_VERSION = '2.1.0';\nexport const VNP_DEFAULT_COMMAND = 'pay';\nexport const CURR_CODE_VND = 'VND';\n","/**\n * @see https://sandbox.vnpayment.vn/apis/docs/loai-hang-hoa/\n */\nexport enum ProductCode {\n    Food_Consumption = '100000',\n    Phone_Tablet = '110000',\n    ElectricAppliance = '120000',\n    Computers_OfficeEquipment = '130000',\n    Electronics_Sound = '140000',\n    Books_Newspapers_Magazines = '150000',\n    Sports_Picnics = '160000',\n    Hotel_Tourism = '170000',\n    Cuisine = '180000',\n    Entertainment_Training = '190000',\n    Fashion = '200000',\n    Health_Beauty = '210000',\n    Mother_Baby = '220000',\n    KitchenUtensils = '230000',\n    Vehicle = '240000',\n    Pay = '250000',\n    AirlineTickets = '250007',\n    CardCode = '260000',\n    Pharmacy_MedicalServices = '270000',\n    Other = 'other',\n}\n","export * from './product-code.enum';\n\nexport enum UrlService {\n    sandbox = 'https://sandbox.vnpayment.vn/paymentv2/vpcpay.html',\n}\n\nexport enum HashAlgorithm {\n    SHA256 = 'SHA256',\n    SHA512 = 'SHA512',\n    MD5 = 'MD5',\n}\n\nexport enum VnpCurrCode {\n    VND = 'VND',\n}\n\nexport enum VnpLocale {\n    VN = 'vn',\n    EN = 'en',\n}\n\nexport enum VnpCardType {\n    ATM = 'ATM',\n    QRCODE = 'QRCODE',\n}\n\nexport enum VnpTransactionType {\n    PAYMENT = '01',\n    FULL_REFUND = '02',\n    PARTIAL_REFUND = '03',\n}\n\nexport enum RefundTransactionType {\n    FULL_REFUND = '02',\n    PARTIAL_REFUND = '03',\n}\n","import crypto, { type BinaryLike } from 'crypto';\nimport dayjs from 'dayjs';\nimport timezone from 'dayjs/plugin/timezone';\nimport utc from 'dayjs/plugin/utc';\nimport { RESPONSE_MAP } from '../constants/response-map.constant';\nimport { type HashAlgorithm, VnpLocale } from '../enums';\n\n// Setup plugins\ndayjs.extend(utc);\ndayjs.extend(timezone);\n\nexport function getDateInGMT7(date?: Date): Date {\n    const inputDate = date ?? new Date();\n    const utcDate = dayjs.utc(inputDate);\n    return new Date(utcDate.add(7, 'hour').valueOf());\n}\n\n/**\n * Định dạng lại ngày theo định dạng của VNPay, mặc định là yyyyMMddHHmmss\n * @en Format date to VNPay format, default is yyyyMMddHHmmss\n *\n * @param date date to format\n * @param format format of date\n * @returns formatted date\n */\nexport function dateFormat(date: Date, format = 'yyyyMMddHHmmss'): number {\n    const pad = (n: number) => (n < 10 ? `0${n}` : n).toString();\n    const year = date.getFullYear();\n    const month = pad(date.getMonth() + 1);\n    const day = pad(date.getDate());\n    const hour = pad(date.getHours());\n    const minute = pad(date.getMinutes());\n    const second = pad(date.getSeconds());\n\n    return Number(\n        format\n            .replace('yyyy', year.toString())\n            .replace('MM', month)\n            .replace('dd', day)\n            .replace('HH', hour)\n            .replace('mm', minute)\n            .replace('ss', second),\n    );\n}\n\n/**\n * Parse a vnpay date format number to date\n * @param dateNumber An vnpay date format number\n * @returns Date\n */\nexport function parseDate(\n    dateNumber: number | string,\n    tz: 'utc' | 'local' | 'gmt7' = 'local',\n): Date {\n    const dateString = dateNumber.toString();\n\n    const _parseInt = Number.parseInt;\n\n    const year = _parseInt(dateString.slice(0, 4));\n    const month = _parseInt(dateString.slice(4, 6)) - 1; // months are 0-indexed in JavaScript\n    const day = _parseInt(dateString.slice(6, 8));\n    const hour = _parseInt(dateString.slice(8, 10));\n    const minute = _parseInt(dateString.slice(10, 12));\n    const second = _parseInt(dateString.slice(12, 14));\n\n    // Create a formatted date string\n    const formattedDate = `${year}-${String(month + 1).padStart(2, '0')}-${String(day).padStart(2, '0')}T${String(hour).padStart(2, '0')}:${String(minute).padStart(2, '0')}:${String(second).padStart(2, '0')}`;\n\n    switch (tz) {\n        case 'utc': {\n            // Create a UTC date\n            return dayjs.utc(formattedDate).toDate();\n        }\n        case 'gmt7': {\n            // For GMT+7, create a date in Asia/Ho_Chi_Minh timezone\n            const localDate = new Date(year, month, day, hour, minute, second);\n            // Clone the date as UTC, then add 7 hours to simulate GMT+7\n            const utcTime = dayjs.utc(localDate);\n            return utcTime.add(7, 'hour').toDate();\n        }\n        // biome-ignore lint/complexity/noUselessSwitchCase: still good to readable\n        case 'local':\n        default:\n            return new Date(year, month, day, hour, minute, second);\n    }\n}\n\n/**\n * Validate if the date is match with format `yyyyMMddHHmmss` or not\n * @param date The date to be validated\n * @returns True if the date is valid, false otherwise\n */\nexport function isValidVnpayDateFormat(date: number): boolean {\n    const dateString = date.toString();\n    const regex =\n        /^\\d{4}(0[1-9]|1[0-2])(0[1-9]|[12][0-9]|3[01])([01][0-9]|2[0-3])[0-5][0-9][0-5][0-9]$/;\n    return regex.test(dateString);\n}\n\nexport function generateRandomString(\n    length: number,\n    options?: {\n        onlyNumber?: boolean;\n    },\n) {\n    let result = '';\n    let characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    if (options?.onlyNumber) {\n        characters = '0123456789';\n    }\n    const charactersLength = characters.length;\n    for (let i = 0; i < length; i++) {\n        result += `${characters[(Math.random() * charactersLength) | 0]}`;\n    }\n    return result;\n}\n\n/**\n * Lấy thông tin response theo mã response\n * @en Get response message by response code\n *\n * @param responseCode response code from VNPay\n * @param locale locale of response text\n * @param responseMap map of response code and response text if you want to custom\n * @returns message of response code\n */\nexport function getResponseByStatusCode(\n    responseCode = '',\n    locale: VnpLocale = VnpLocale.VN,\n    responseMap = RESPONSE_MAP,\n): string {\n    const respondText: Record<VnpLocale, string> =\n        responseMap.get(responseCode) ?? (responseMap.get('default') as Record<VnpLocale, string>);\n\n    return respondText[locale];\n}\n\nexport function resolveUrlString(host: string, path: string): string {\n    let trimmedHost = host.trim();\n    let trimmedPath = path.trim();\n\n    while (trimmedHost.endsWith('/') || trimmedHost.endsWith('\\\\')) {\n        trimmedHost = trimmedHost.slice(0, -1);\n    }\n    while (trimmedPath.startsWith('/') || trimmedPath.startsWith('\\\\')) {\n        trimmedPath = trimmedPath.slice(1);\n    }\n    return `${trimmedHost}/${trimmedPath}`;\n}\n\nexport function hash(\n    secret: string,\n    data: BinaryLike | string | Buffer,\n    algorithm: HashAlgorithm,\n): string {\n    return crypto.createHmac(algorithm, secret).update(data.toString()).digest('hex');\n}\n","import * as fs from 'fs';\n\n/**\n * Truyền vào `loggerFn` để bỏ qua logger\n *\n * @en Pass to `loggerFn` for ignoring logger\n * @returns {void}\n */\nexport function ignoreLogger(): void {}\n\n/**\n * Ghi dữ liệu ra console\n *\n * @en Log data to console\n * @param data - Data to be logged\n */\nexport function consoleLogger(data: unknown, symbol: keyof Console = 'log'): void {\n    if (typeof console[symbol] === 'function') {\n        (console[symbol] as (...data: unknown[]) => void)(data);\n    }\n}\n\n/**\n * Ghi dữ liệu ra file\n *\n * @en Log data to file\n * @param data Data to be logged\n * @param filePath File path to be written\n * @param errorCallback Error callback function\n */\nexport function fileLogger(data: unknown, filePath: string, errorCallback?: unknown): void {\n    const dataString = typeof data === 'object' ? JSON.stringify(data) : String(data);\n    fs.appendFile(filePath, `${dataString}\\n`, (err) => {\n        if (err && typeof errorCallback === 'function') {\n            return errorCallback(err);\n        }\n\n        if (err) {\n            console.error('Failed to write to file:', err);\n            throw err;\n        }\n    });\n}\n","import crypto from 'crypto';\nimport type { HashAlgorithm } from '../enums';\nimport type { GlobalConfig } from '../types';\nimport { resolveUrlString } from './common';\n\n/**\n * Hàm tạo các parameter cho query string\n * @en Function to build payment URL search parameters\n */\nexport function buildPaymentUrlSearchParams(data: Record<string, unknown>): URLSearchParams {\n    const params = new URLSearchParams();\n\n    // Sort keys\n    const sortedKeys = Object.keys(data).sort();\n\n    // Add sorted parameters\n    for (const key of sortedKeys) {\n        if (data[key] !== undefined && data[key] !== null) {\n            params.append(key, String(data[key]));\n        }\n    }\n\n    return params;\n}\n\n/**\n * Hàm tạo URL thanh toán dựa trên config và data\n * @en Function to create payment URL based on config and data\n */\nexport function createPaymentUrl({\n    config,\n    data,\n}: {\n    config: GlobalConfig;\n    data: Record<string, unknown>;\n}): URL {\n    // Use the endpoints.paymentEndpoint if available, or fall back to config.paymentEndpoint for backward compatibility\n    const paymentEndpoint = config.endpoints?.paymentEndpoint || config.paymentEndpoint;\n\n    const redirectUrl = new URL(resolveUrlString(config.vnpayHost, paymentEndpoint as string));\n\n    const searchParams = buildPaymentUrlSearchParams(data);\n    redirectUrl.search = searchParams.toString();\n\n    return redirectUrl;\n}\n\n/**\n * Hàm tính toán mã bảo mật\n * @en Function to calculate secure hash\n */\nexport function calculateSecureHash({\n    secureSecret,\n    data,\n    hashAlgorithm,\n    bufferEncode,\n}: {\n    secureSecret: string;\n    data: string;\n    hashAlgorithm: HashAlgorithm;\n    bufferEncode: BufferEncoding;\n}): string {\n    return crypto\n        .createHmac(hashAlgorithm, secureSecret)\n        .update(Buffer.from(data, bufferEncode))\n        .digest('hex');\n}\n\n/**\n * Hàm xác minh mã bảo mật\n * @en Function to verify secure hash\n */\nexport function verifySecureHash({\n    secureSecret,\n    data,\n    hashAlgorithm,\n    receivedHash,\n}: {\n    secureSecret: string;\n    data: string;\n    hashAlgorithm: HashAlgorithm;\n    receivedHash: string;\n}): boolean {\n    const calculatedHash = crypto\n        .createHmac(hashAlgorithm, secureSecret)\n        .update(Buffer.from(data, 'utf-8'))\n        .digest('hex');\n\n    return calculatedHash === receivedHash;\n}\n","import type { LoggerOptions } from '../types/logger.type';\nimport { consoleLogger, ignoreLogger } from '../utils';\n\n/**\n * Lớp dịch vụ xử lý log cho VNPay\n * @en Logger service class for VNPay\n */\nexport class LoggerService {\n    private isEnabled = false;\n    private readonly loggerFn: (data: unknown) => void = ignoreLogger;\n\n    /**\n     * Khởi tạo dịch vụ logger\n     * @en Initialize logger service\n     *\n     * @param isEnabled - Cho phép log hay không\n     * @en @param isEnabled - Enable logging or not\n     *\n     * @param customLoggerFn - Hàm logger tùy chỉnh\n     * @en @param customLoggerFn - Custom logger function\n     */\n    constructor(isEnabled = false, customLoggerFn?: (data: unknown) => void) {\n        this.isEnabled = isEnabled;\n        this.loggerFn = customLoggerFn || (isEnabled ? consoleLogger : ignoreLogger);\n    }\n\n    /**\n     * Ghi log dữ liệu\n     * @en Log data\n     *\n     * @param data - Dữ liệu cần log\n     * @en @param data - Data to log\n     *\n     * @param options - Tùy chọn log\n     * @en @param options - Logging options\n     *\n     * @param methodName - Tên phương thức gọi log\n     * @en @param methodName - Method name that calls the log\n     */\n    public log<T extends object, LoggerFields extends keyof T>(\n        data: T,\n        options?: LoggerOptions<T, LoggerFields>,\n        methodName?: string,\n    ): void {\n        if (!this.isEnabled) return;\n\n        const logData = { ...data };\n\n        if (methodName) {\n            Object.assign(logData, { method: methodName, createdAt: new Date() });\n        }\n\n        if (options?.logger && 'fields' in options.logger) {\n            const { type, fields } = options.logger;\n\n            for (const key of Object.keys(logData)) {\n                const keyAssert = key as unknown as LoggerFields;\n                if (\n                    (type === 'omit' && fields.includes(keyAssert)) ||\n                    (type === 'pick' && !fields.includes(keyAssert))\n                ) {\n                    delete logData[keyAssert];\n                }\n            }\n        }\n\n        // Execute logger function\n        (options?.logger?.loggerFn || this.loggerFn)(logData);\n    }\n}\n","import { VNP_DEFAULT_COMMAND, VNP_VERSION } from '../constants';\nimport { type HashAlgorithm, ProductCode, VnpCurrCode, VnpLocale } from '../enums';\nimport type {\n    BuildPaymentUrl,\n    BuildPaymentUrlLogger,\n    BuildPaymentUrlOptions,\n    DefaultConfig,\n    GlobalConfig,\n    VNPayConfig,\n} from '../types';\nimport { dateFormat, getDateInGMT7, isValidVnpayDateFormat } from '../utils/common';\nimport {\n    buildPaymentUrlSearchParams,\n    calculateSecureHash,\n    createPaymentUrl,\n} from '../utils/payment.util';\nimport type { LoggerService } from './logger.service';\n\n/**\n * Dịch vụ xử lý thanh toán của VNPay\n * @en Payment service for VNPay\n */\nexport class PaymentService {\n    private readonly config: GlobalConfig;\n    private readonly defaultConfig: DefaultConfig;\n    private readonly logger: LoggerService;\n    private readonly hashAlgorithm: HashAlgorithm;\n    private readonly bufferEncode: BufferEncoding = 'utf-8';\n\n    /**\n     * Khởi tạo dịch vụ thanh toán\n     * @en Initialize payment service\n     *\n     * @param config - Cấu hình VNPay\n     * @en @param config - VNPay configuration\n     *\n     * @param logger - Dịch vụ logger\n     * @en @param logger - Logger service\n     *\n     * @param hashAlgorithm - Thuật toán băm\n     * @en @param hashAlgorithm - Hash algorithm\n     */\n    constructor(config: GlobalConfig, logger: LoggerService, hashAlgorithm: HashAlgorithm) {\n        this.config = config;\n        this.hashAlgorithm = hashAlgorithm;\n        this.logger = logger;\n\n        this.defaultConfig = {\n            vnp_TmnCode: config.tmnCode,\n            vnp_Version: config.vnp_Version,\n            vnp_CurrCode: config.vnp_CurrCode,\n            vnp_Locale: config.vnp_Locale,\n            vnp_Command: config.vnp_Command,\n            vnp_OrderType: config.vnp_OrderType,\n        };\n    }\n\n    /**\n     * Phương thức xây dựng, tạo thành url thanh toán của VNPay\n     * @en Build the payment url\n     *\n     * @param {BuildPaymentUrl} data - Thông tin thanh toán\n     * @en @param {BuildPaymentUrl} data - Payment information\n     *\n     * @param {BuildPaymentUrlOptions<LoggerFields>} options - Tùy chọn\n     * @en @param {BuildPaymentUrlOptions<LoggerFields>} options - Options\n     *\n     * @returns {string} - URL thanh toán\n     * @en @returns {string} - Payment URL\n     */\n    public buildPaymentUrl<LoggerFields extends keyof BuildPaymentUrlLogger>(\n        data: BuildPaymentUrl,\n        options?: BuildPaymentUrlOptions<LoggerFields>,\n    ): string {\n        const dataToBuild = {\n            ...this.defaultConfig,\n            ...data,\n\n            // Multiply by 100 to follow VNPay standard\n            vnp_Amount: data.vnp_Amount * 100,\n        };\n\n        if (dataToBuild?.vnp_ExpireDate && !isValidVnpayDateFormat(dataToBuild.vnp_ExpireDate)) {\n            throw new Error(\n                'Invalid vnp_ExpireDate format. Use `dateFormat` utility function to format it',\n            );\n        }\n\n        if (!isValidVnpayDateFormat(dataToBuild?.vnp_CreateDate ?? 0)) {\n            const timeGMT7 = getDateInGMT7();\n            dataToBuild.vnp_CreateDate = dateFormat(timeGMT7, 'yyyyMMddHHmmss');\n        }\n\n        const redirectUrl = createPaymentUrl({\n            config: this.config,\n            data: dataToBuild,\n        });\n\n        const signed = calculateSecureHash({\n            secureSecret: this.config.secureSecret,\n            data: redirectUrl.search.slice(1).toString(),\n            hashAlgorithm: this.hashAlgorithm,\n            bufferEncode: this.bufferEncode,\n        });\n        redirectUrl.searchParams.append('vnp_SecureHash', signed);\n\n        // Log if enabled\n        const data2Log: BuildPaymentUrlLogger = {\n            createdAt: new Date(),\n            method: 'buildPaymentUrl',\n            paymentUrl: options?.withHash\n                ? redirectUrl.toString()\n                : (() => {\n                      const cloneUrl = new URL(redirectUrl.toString());\n                      cloneUrl.searchParams.delete('vnp_SecureHash');\n                      return cloneUrl.toString();\n                  })(),\n            ...dataToBuild,\n        };\n\n        this.logger.log(data2Log, options, 'buildPaymentUrl');\n\n        return redirectUrl.toString();\n    }\n}\n","import {\n    QUERY_DR_REFUND_ENDPOINT,\n    QUERY_DR_RESPONSE_MAP,\n    REFUND_RESPONSE_MAP,\n    VNP_VERSION,\n    WRONG_CHECKSUM_KEY,\n} from '../constants';\nimport type { HashAlgorithm } from '../enums';\nimport type {\n    GlobalConfig,\n    QueryDr,\n    QueryDrResponse,\n    QueryDrResponseLogger,\n    QueryDrResponseOptions,\n    Refund,\n    RefundOptions,\n    RefundResponse,\n    RefundResponseLogger,\n} from '../types';\n// Import specific types from their files to fix linter errors\nimport type { BodyRequestQueryDr, QueryDrResponseFromVNPay } from '../types/query-dr.type';\nimport type { RefundResponseFromVNPay } from '../types/refund.type';\nimport { getResponseByStatusCode, hash, resolveUrlString } from '../utils/common';\nimport type { LoggerService } from './logger.service';\n\n/**\n * Dịch vụ truy vấn kết quả và hoàn tiền VNPay\n * @en Query and refund service for VNPay\n */\nexport class QueryService {\n    private readonly config: GlobalConfig;\n    private readonly logger: LoggerService;\n    private readonly hashAlgorithm: HashAlgorithm;\n    private readonly bufferEncode: BufferEncoding = 'utf-8';\n\n    /**\n     * Khởi tạo dịch vụ truy vấn\n     * @en Initialize query service\n     *\n     * @param config - Cấu hình VNPay\n     * @en @param config - VNPay configuration\n     *\n     * @param logger - Dịch vụ logger\n     * @en @param logger - Logger service\n     *\n     * @param hashAlgorithm - Thuật toán băm\n     * @en @param hashAlgorithm - Hash algorithm\n     */\n    constructor(config: GlobalConfig, logger: LoggerService, hashAlgorithm: HashAlgorithm) {\n        this.config = config;\n        this.logger = logger;\n        this.hashAlgorithm = hashAlgorithm;\n    }\n\n    /**\n     * Đây là API để hệ thống merchant truy vấn kết quả thanh toán của giao dịch tại hệ thống VNPAY.\n     * @en This is the API for the merchant system to query the payment result of the transaction at the VNPAY system.\n     *\n     * @param {QueryDr} query - Dữ liệu truy vấn kết quả thanh toán\n     * @en @param {QueryDr} query - The data to query payment result\n     *\n     * @param {QueryDrResponseOptions<LoggerFields>} options - Tùy chọn\n     * @en @param {QueryDrResponseOptions<LoggerFields>} options - Options\n     *\n     * @returns {Promise<QueryDrResponse>} Kết quả truy vấn\n     * @en @returns {Promise<QueryDrResponse>} The query result\n     */\n    public async queryDr<LoggerFields extends keyof QueryDrResponseLogger>(\n        query: QueryDr,\n        options?: QueryDrResponseOptions<LoggerFields>,\n    ): Promise<QueryDrResponse> {\n        const command = 'querydr';\n        const dataQuery = {\n            vnp_Version: this.config.vnp_Version ?? VNP_VERSION,\n            ...query,\n        };\n\n        const queryEndpoint =\n            this.config.endpoints.queryDrRefundEndpoint || QUERY_DR_REFUND_ENDPOINT;\n        const url = new URL(resolveUrlString(this.config.vnpayHost, queryEndpoint));\n\n        const stringToCreateHash = [\n            dataQuery.vnp_RequestId,\n            dataQuery.vnp_Version,\n            command,\n            this.config.tmnCode,\n            dataQuery.vnp_TxnRef,\n            dataQuery.vnp_TransactionDate,\n            dataQuery.vnp_CreateDate,\n            dataQuery.vnp_IpAddr,\n            dataQuery.vnp_OrderInfo,\n        ]\n            .map(String)\n            .join('|')\n            .replace(/undefined/g, '');\n\n        const requestHashed = hash(\n            this.config.secureSecret,\n            Buffer.from(stringToCreateHash, this.bufferEncode),\n            this.hashAlgorithm,\n        );\n\n        const body: BodyRequestQueryDr = {\n            ...dataQuery,\n            vnp_Command: command,\n            vnp_TmnCode: this.config.tmnCode,\n            vnp_SecureHash: requestHashed,\n        };\n\n        const response = await fetch(url.toString(), {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(body),\n        });\n\n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n\n        const responseData = (await response.json()) as QueryDrResponseFromVNPay;\n\n        const message = getResponseByStatusCode(\n            responseData.vnp_ResponseCode?.toString() ?? '',\n            this.config.vnp_Locale,\n            QUERY_DR_RESPONSE_MAP,\n        );\n\n        let outputResults = {\n            isVerified: true,\n            isSuccess:\n                responseData.vnp_ResponseCode === '00' || responseData.vnp_ResponseCode === 0,\n            message,\n            ...responseData,\n            vnp_Message: message,\n        };\n\n        const stringToCreateHashOfResponse = [\n            responseData.vnp_ResponseId,\n            responseData.vnp_Command,\n            responseData.vnp_ResponseCode,\n            responseData.vnp_Message,\n            this.config.tmnCode,\n            responseData.vnp_TxnRef,\n            responseData.vnp_Amount,\n            responseData.vnp_BankCode,\n            responseData.vnp_PayDate,\n            responseData.vnp_TransactionNo,\n            responseData.vnp_TransactionType,\n            responseData.vnp_TransactionStatus,\n            responseData.vnp_OrderInfo,\n            responseData.vnp_PromotionCode,\n            responseData.vnp_PromotionAmount,\n        ]\n            .map(String)\n            .join('|')\n            .replace(/undefined/g, '');\n\n        const responseHashed = hash(\n            this.config.secureSecret,\n            Buffer.from(stringToCreateHashOfResponse, this.bufferEncode),\n            this.hashAlgorithm,\n        );\n\n        if (responseData?.vnp_SecureHash && responseHashed !== responseData.vnp_SecureHash) {\n            outputResults = {\n                ...outputResults,\n                isVerified: false,\n                message: getResponseByStatusCode(\n                    WRONG_CHECKSUM_KEY,\n                    this.config.vnp_Locale,\n                    QUERY_DR_RESPONSE_MAP,\n                ),\n            };\n        }\n\n        const data2Log: QueryDrResponseLogger = {\n            createdAt: new Date(),\n            method: 'queryDr',\n            ...outputResults,\n        };\n\n        this.logger.log(data2Log, options, 'queryDr');\n\n        return outputResults;\n    }\n\n    /**\n     * Đây là API để hệ thống merchant gửi yêu cầu hoàn tiền cho giao dịch qua hệ thống Cổng thanh toán VNPAY.\n     * @en This is the API for the merchant system to refund the transaction at the VNPAY system.\n     *\n     * @param {Refund} data - Dữ liệu yêu cầu hoàn tiền\n     * @en @param {Refund} data - The data to request refund\n     *\n     * @param {RefundOptions<LoggerFields>} options - Tùy chọn\n     * @en @param {RefundOptions<LoggerFields>} options - Options\n     *\n     * @returns {Promise<RefundResponse>} Kết quả hoàn tiền\n     * @en @returns {Promise<RefundResponse>} The refund result\n     */\n    public async refund<LoggerFields extends keyof RefundResponseLogger>(\n        data: Refund,\n        options?: RefundOptions<LoggerFields>,\n    ): Promise<RefundResponse> {\n        const vnp_Command = 'refund';\n        const DEFAULT_TRANSACTION_NO_IF_NOT_EXIST = '0';\n\n        const dataQuery = {\n            ...data,\n            vnp_Command,\n            vnp_Version: this.config.vnp_Version ?? VNP_VERSION,\n            vnp_TmnCode: this.config.tmnCode,\n            vnp_Amount: data.vnp_Amount * 100,\n        };\n\n        const {\n            vnp_Version,\n            vnp_TmnCode,\n            vnp_RequestId,\n            vnp_TransactionType,\n            vnp_TxnRef,\n            vnp_TransactionNo = DEFAULT_TRANSACTION_NO_IF_NOT_EXIST,\n            vnp_TransactionDate,\n            vnp_CreateBy,\n            vnp_CreateDate,\n            vnp_IpAddr,\n            vnp_OrderInfo,\n        } = dataQuery;\n\n        // Use custom endpoint if configured\n        const refundEndpoint =\n            this.config.endpoints.queryDrRefundEndpoint || QUERY_DR_REFUND_ENDPOINT;\n        const url = new URL(resolveUrlString(this.config.vnpayHost, refundEndpoint));\n\n        const stringToHashOfRequest = [\n            vnp_RequestId,\n            vnp_Version,\n            vnp_Command,\n            vnp_TmnCode,\n            vnp_TransactionType,\n            vnp_TxnRef,\n            dataQuery.vnp_Amount,\n            vnp_TransactionNo,\n            vnp_TransactionDate,\n            vnp_CreateBy,\n            vnp_CreateDate,\n            vnp_IpAddr,\n            vnp_OrderInfo,\n        ]\n            .map(String)\n            .join('|')\n            .replace(/undefined/g, '');\n\n        const requestHashed = hash(\n            this.config.secureSecret,\n            Buffer.from(stringToHashOfRequest, this.bufferEncode),\n            this.hashAlgorithm,\n        );\n\n        const body = {\n            ...dataQuery,\n            vnp_SecureHash: requestHashed,\n        };\n\n        const response = await fetch(url.toString(), {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(body),\n        });\n\n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n\n        const responseData = (await response.json()) as RefundResponseFromVNPay;\n\n        if (responseData?.vnp_Amount) {\n            responseData.vnp_Amount = responseData.vnp_Amount / 100;\n        }\n\n        const message = getResponseByStatusCode(\n            responseData.vnp_ResponseCode?.toString() ?? '',\n            data?.vnp_Locale ?? this.config.vnp_Locale,\n            REFUND_RESPONSE_MAP,\n        );\n\n        let outputResults = {\n            isVerified: true,\n            isSuccess:\n                responseData.vnp_ResponseCode === '00' || responseData.vnp_ResponseCode === 0,\n            message,\n            ...responseData,\n            vnp_Message: message,\n        };\n\n        // Only check signed hash when request is not error\n        if (\n            Number(responseData.vnp_ResponseCode) <= 90 &&\n            Number(responseData.vnp_ResponseCode) >= 99\n        ) {\n            const stringToCreateHashOfResponse = [\n                responseData.vnp_ResponseId,\n                responseData.vnp_Command,\n                responseData.vnp_ResponseCode,\n                responseData.vnp_Message,\n                responseData.vnp_TmnCode,\n                responseData.vnp_TxnRef,\n                responseData.vnp_Amount,\n                responseData.vnp_BankCode,\n                responseData.vnp_PayDate,\n                responseData.vnp_TransactionNo,\n                responseData.vnp_TransactionType,\n                responseData.vnp_TransactionStatus,\n                responseData.vnp_OrderInfo,\n            ]\n                .map(String)\n                .join('|')\n                .replace(/undefined/g, '');\n\n            const responseHashed = hash(\n                this.config.secureSecret,\n                Buffer.from(stringToCreateHashOfResponse, this.bufferEncode),\n                this.hashAlgorithm,\n            );\n\n            if (responseData?.vnp_SecureHash && responseHashed !== responseData.vnp_SecureHash) {\n                outputResults = {\n                    ...outputResults,\n                    isVerified: false,\n                    message: getResponseByStatusCode(\n                        WRONG_CHECKSUM_KEY,\n                        this.config.vnp_Locale,\n                        REFUND_RESPONSE_MAP,\n                    ),\n                };\n            }\n        }\n\n        const data2Log: RefundResponseLogger = {\n            createdAt: new Date(),\n            method: 'refund',\n            ...outputResults,\n        };\n\n        this.logger.log(data2Log, options, 'refund');\n\n        return outputResults;\n    }\n}\n","import { WRONG_CHECKSUM_KEY, numberRegex } from '../constants';\nimport type { HashAlgorithm } from '../enums';\nimport type {\n    GlobalConfig,\n    ReturnQueryFromVNPay,\n    VerifyIpnCall,\n    VerifyIpnCallLogger,\n    VerifyIpnCallOptions,\n    VerifyReturnUrl,\n    VerifyReturnUrlLogger,\n    VerifyReturnUrlOptions,\n} from '../types';\nimport { ignoreLogger } from '../utils';\nimport { getResponseByStatusCode } from '../utils/common';\nimport { buildPaymentUrlSearchParams, verifySecureHash } from '../utils/payment.util';\nimport type { LoggerService } from './logger.service';\n\n/**\n * Dịch vụ xác thực dữ liệu từ VNPay\n * @en Verification service for VNPay data\n */\nexport class VerificationService {\n    private readonly config: GlobalConfig;\n    private readonly logger: LoggerService;\n    private readonly hashAlgorithm: HashAlgorithm;\n\n    /**\n     * Khởi tạo dịch vụ xác thực\n     * @en Initialize verification service\n     *\n     * @param config - Cấu hình VNPay\n     * @en @param config - VNPay configuration\n     *\n     * @param logger - Dịch vụ logger\n     * @en @param logger - Logger service\n     *\n     * @param hashAlgorithm - Thuật toán băm\n     * @en @param hashAlgorithm - Hash algorithm\n     */\n    constructor(config: GlobalConfig, logger: LoggerService, hashAlgorithm: HashAlgorithm) {\n        this.config = config;\n        this.logger = logger;\n        this.hashAlgorithm = hashAlgorithm;\n    }\n\n    /**\n     * Phương thức xác thực tính đúng đắn của các tham số trả về từ VNPay\n     * @en Method to verify the return url from VNPay\n     *\n     * @param {ReturnQueryFromVNPay} query - Đối tượng dữ liệu trả về từ VNPay\n     * @en @param {ReturnQueryFromVNPay} query - The object of data return from VNPay\n     *\n     * @param {VerifyReturnUrlOptions<LoggerFields>} options - Tùy chọn\n     * @en @param {VerifyReturnUrlOptions<LoggerFields>} options - Options\n     *\n     * @returns {VerifyReturnUrl} Kết quả xác thực\n     * @en @returns {VerifyReturnUrl} The verification result\n     */\n    public verifyReturnUrl<LoggerFields extends keyof VerifyReturnUrlLogger>(\n        query: ReturnQueryFromVNPay,\n        options?: VerifyReturnUrlOptions<LoggerFields>,\n    ): VerifyReturnUrl {\n        const { vnp_SecureHash = '', vnp_SecureHashType, ...cloneQuery } = query;\n\n        if (typeof cloneQuery?.vnp_Amount !== 'number') {\n            const isValidAmount = numberRegex.test(cloneQuery?.vnp_Amount ?? '');\n            if (!isValidAmount) {\n                throw new Error('Invalid amount');\n            }\n            cloneQuery.vnp_Amount = Number(cloneQuery.vnp_Amount);\n        }\n\n        const searchParams = buildPaymentUrlSearchParams(cloneQuery);\n        const isVerified = verifySecureHash({\n            secureSecret: this.config.secureSecret,\n            data: searchParams.toString(),\n            hashAlgorithm: this.hashAlgorithm,\n            receivedHash: vnp_SecureHash,\n        });\n\n        let outputResults = {\n            isVerified,\n            isSuccess: cloneQuery.vnp_ResponseCode === '00',\n            message: getResponseByStatusCode(\n                cloneQuery.vnp_ResponseCode?.toString() ?? '',\n                this.config.vnp_Locale,\n            ),\n        };\n\n        if (!isVerified) {\n            outputResults = {\n                ...outputResults,\n                message: 'Wrong checksum',\n            };\n        }\n\n        const result = {\n            ...cloneQuery,\n            ...outputResults,\n            vnp_Amount: cloneQuery.vnp_Amount / 100,\n        };\n\n        const data2Log: VerifyReturnUrlLogger = {\n            createdAt: new Date(),\n            method: 'verifyReturnUrl',\n            ...result,\n            vnp_SecureHash: options?.withHash ? vnp_SecureHash : undefined,\n        };\n\n        this.logger.log(data2Log, options, 'verifyReturnUrl');\n\n        return result;\n    }\n\n    /**\n     * Phương thức xác thực tính đúng đắn của lời gọi ipn từ VNPay\n     *\n     * Sau khi nhận được lời gọi, hệ thống merchant cần xác thực dữ liệu nhận được từ VNPay,\n     * kiểm tra đơn hàng có hợp lệ không, kiểm tra số tiền thanh toán có đúng không.\n     *\n     * @en Method to verify the ipn url from VNPay\n     *\n     * After receiving the call, the merchant system needs to verify the data received from VNPay,\n     * check if the order is valid, check if the payment amount is correct.\n     *\n     * @param {ReturnQueryFromVNPay} query - Đối tượng dữ liệu trả về từ VNPay\n     * @en @param {ReturnQueryFromVNPay} query - The object of data return from VNPay\n     *\n     * @param {VerifyIpnCallOptions<LoggerFields>} options - Tùy chọn\n     * @en @param {VerifyIpnCallOptions<LoggerFields>} options - Options\n     *\n     * @returns {VerifyIpnCall} Kết quả xác thực\n     * @en @returns {VerifyIpnCall} The verification result\n     */\n    public verifyIpnCall<LoggerFields extends keyof VerifyIpnCallLogger>(\n        query: ReturnQueryFromVNPay,\n        options?: VerifyIpnCallOptions<LoggerFields>,\n    ): VerifyIpnCall {\n        const hash = query.vnp_SecureHash;\n\n        // Use silent logger to avoid double logging\n        const silentOptions = { logger: { loggerFn: ignoreLogger } };\n        // Fix the 'any' type issue by using a more specific type\n        const result = this.verifyReturnUrl(\n            query,\n            silentOptions as VerifyReturnUrlOptions<keyof VerifyReturnUrlLogger>,\n        );\n\n        const data2Log: VerifyIpnCallLogger = {\n            createdAt: new Date(),\n            method: 'verifyIpnCall',\n            ...result,\n            ...(options?.withHash ? { vnp_SecureHash: hash } : {}),\n        };\n\n        this.logger.log(data2Log, options, 'verifyIpnCall');\n\n        return result;\n    }\n}\n","import {\n    GET_BANK_LIST_ENDPOINT,\n    PAYMENT_ENDPOINT,\n    QUERY_DR_REFUND_ENDPOINT,\n    VNPAY_GATEWAY_SANDBOX_HOST,\n    VNP_DEFAULT_COMMAND,\n    VNP_VERSION,\n} from './constants';\nimport { HashAlgorithm, ProductCode, VnpCurrCode, VnpLocale } from './enums';\nimport { LoggerService } from './services/logger.service';\nimport { PaymentService } from './services/payment.service';\nimport { QueryService } from './services/query.service';\nimport { VerificationService } from './services/verification.service';\nimport type {\n    Bank,\n    BuildPaymentUrl,\n    BuildPaymentUrlLogger,\n    BuildPaymentUrlOptions,\n    DefaultConfig,\n    EndpointConfig,\n    GlobalConfig,\n    QueryDr,\n    QueryDrResponse,\n    QueryDrResponseLogger,\n    QueryDrResponseOptions,\n    Refund,\n    RefundOptions,\n    RefundResponse,\n    RefundResponseLogger,\n    ReturnQueryFromVNPay,\n    VNPayConfig,\n    VerifyIpnCall,\n    VerifyIpnCallLogger,\n    VerifyIpnCallOptions,\n    VerifyReturnUrl,\n    VerifyReturnUrlLogger,\n    VerifyReturnUrlOptions,\n} from './types';\nimport { resolveUrlString } from './utils/common';\n\n/**\n * Lớp hỗ trợ thanh toán qua VNPay\n * @en VNPay class to support VNPay payment\n * @see https://sandbox.vnpayment.vn/apis/docs/thanh-toan-pay/pay.html\n *\n * @example\n * import { VNPay } from 'vnpay';\n *\n * const vnpay = new VNPay({\n *     vnpayHost: 'https://sandbox.vnpayment.vn',\n *     tmnCode: 'TMNCODE',\n *     secureSecret: 'SERCRET',\n *     testMode: true, // optional\n *     hashAlgorithm: 'SHA512', // optional\n *     // Using new endpoints configuration\n *     endpoints: {\n *       paymentEndpoint: 'paymentv2/vpcpay.html',\n *       queryDrRefundEndpoint: 'merchant_webapi/api/transaction',\n *       getBankListEndpoint: 'qrpayauth/api/merchant/get_bank_list',\n *     }\n * });\n *\n * const tnx = '12345678'; // Generate your own transaction code\n * const urlString = vnpay.buildPaymentUrl({\n *     vnp_Amount: 100000,\n *     vnp_IpAddr: '192.168.0.1',\n *     vnp_ReturnUrl: 'http://localhost:8888/order/vnpay_return',\n *     vnp_TxnRef: tnx,\n *     vnp_OrderInfo: `Thanh toan cho ma GD: ${tnx}`,\n * }),\n *\n */\nexport class VNPay {\n    private readonly globalConfig: GlobalConfig;\n    private readonly hashAlgorithm: HashAlgorithm;\n\n    // Service instances\n    private readonly loggerService: LoggerService;\n    private readonly paymentService: PaymentService;\n    private readonly verificationService: VerificationService;\n    private readonly queryService: QueryService;\n\n    /**\n     * Khởi tạo đối tượng VNPay\n     * @en Initialize VNPay instance\n     *\n     * @param {VNPayConfig} config - VNPay configuration\n     */\n    constructor({\n        vnpayHost = VNPAY_GATEWAY_SANDBOX_HOST,\n        vnp_Version = VNP_VERSION,\n        vnp_CurrCode = VnpCurrCode.VND,\n        vnp_Locale = VnpLocale.VN,\n        testMode = false,\n        paymentEndpoint = PAYMENT_ENDPOINT,\n        endpoints = {},\n        ...config\n    }: VNPayConfig) {\n        if (testMode) {\n            vnpayHost = VNPAY_GATEWAY_SANDBOX_HOST;\n        }\n\n        this.hashAlgorithm = config?.hashAlgorithm ?? HashAlgorithm.SHA512;\n\n        // Initialize endpoints with defaults and overrides\n        const initializedEndpoints: EndpointConfig = {\n            paymentEndpoint: endpoints.paymentEndpoint || paymentEndpoint,\n            queryDrRefundEndpoint: endpoints.queryDrRefundEndpoint || QUERY_DR_REFUND_ENDPOINT,\n            getBankListEndpoint: endpoints.getBankListEndpoint || GET_BANK_LIST_ENDPOINT,\n        };\n\n        this.globalConfig = {\n            vnpayHost,\n            vnp_Version,\n            vnp_CurrCode,\n            vnp_Locale,\n            vnp_OrderType: ProductCode.Other,\n            vnp_Command: VNP_DEFAULT_COMMAND,\n            paymentEndpoint: initializedEndpoints.paymentEndpoint as string,\n            endpoints: initializedEndpoints,\n            ...config,\n        };\n\n        this.loggerService = new LoggerService(config?.enableLog ?? false, config?.loggerFn);\n\n        this.paymentService = new PaymentService(\n            this.globalConfig,\n            this.loggerService,\n            this.hashAlgorithm,\n        );\n\n        this.verificationService = new VerificationService(\n            this.globalConfig,\n            this.loggerService,\n            this.hashAlgorithm,\n        );\n\n        this.queryService = new QueryService(\n            this.globalConfig,\n            this.loggerService,\n            this.hashAlgorithm,\n        );\n    }\n\n    /**\n     * Lấy cấu hình mặc định của VNPay\n     * @en Get default config of VNPay\n     *\n     * @returns {DefaultConfig} Cấu hình mặc định\n     * @en @returns {DefaultConfig} Default configuration\n     */\n    public get defaultConfig(): DefaultConfig {\n        return {\n            vnp_TmnCode: this.globalConfig.tmnCode,\n            vnp_Version: this.globalConfig.vnp_Version,\n            vnp_CurrCode: this.globalConfig.vnp_CurrCode,\n            vnp_Locale: this.globalConfig.vnp_Locale,\n            vnp_Command: this.globalConfig.vnp_Command,\n            vnp_OrderType: this.globalConfig.vnp_OrderType,\n        };\n    }\n\n    /**\n     * Lấy danh sách ngân hàng được hỗ trợ bởi VNPay\n     * @en Get list of banks supported by VNPay\n     *\n     * @returns {Promise<Bank[]>} Danh sách ngân hàng\n     * @en @returns {Promise<Bank[]>} List of banks\n     */\n    public async getBankList(): Promise<Bank[]> {\n        const response = await fetch(\n            resolveUrlString(\n                this.globalConfig.vnpayHost ?? VNPAY_GATEWAY_SANDBOX_HOST,\n                this.globalConfig.endpoints.getBankListEndpoint as string,\n            ),\n            {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/x-www-form-urlencoded',\n                },\n                body: `tmn_code=${this.globalConfig.tmnCode}`,\n            },\n        );\n\n        const bankList = (await response.json()) as Bank[];\n\n        for (const bank of bankList) {\n            bank.logo_link = resolveUrlString(\n                this.globalConfig.vnpayHost ?? VNPAY_GATEWAY_SANDBOX_HOST,\n                bank.logo_link.slice(1),\n            );\n        }\n\n        return bankList;\n    }\n\n    /**\n     * Phương thức xây dựng, tạo thành url thanh toán của VNPay\n     * @en Build the payment url\n     *\n     * @param {BuildPaymentUrl} data - Dữ liệu thanh toán cần thiết để tạo URL\n     * @en @param {BuildPaymentUrl} data - Payment data required to create URL\n     *\n     * @param {BuildPaymentUrlOptions<LoggerFields>} options - Tùy chọn bổ sung\n     * @en @param {BuildPaymentUrlOptions<LoggerFields>} options - Additional options\n     *\n     * @returns {string} URL thanh toán\n     * @en @returns {string} Payment URL\n     * @see https://sandbox.vnpayment.vn/apis/docs/thanh-toan-pay/pay.html#tao-url-thanh-toan\n     */\n    public buildPaymentUrl<LoggerFields extends keyof BuildPaymentUrlLogger>(\n        data: BuildPaymentUrl,\n        options?: BuildPaymentUrlOptions<LoggerFields>,\n    ): string {\n        return this.paymentService.buildPaymentUrl(data, options);\n    }\n\n    /**\n     * Phương thức xác thực tính đúng đắn của các tham số trả về từ VNPay\n     * @en Method to verify the return url from VNPay\n     *\n     * @param {ReturnQueryFromVNPay} query - Đối tượng dữ liệu trả về từ VNPay\n     * @en @param {ReturnQueryFromVNPay} query - The object of data returned from VNPay\n     *\n     * @param {VerifyReturnUrlOptions<LoggerFields>} options - Tùy chọn để xác thực\n     * @en @param {VerifyReturnUrlOptions<LoggerFields>} options - Options for verification\n     *\n     * @returns {VerifyReturnUrl} Kết quả xác thực\n     * @en @returns {VerifyReturnUrl} Verification result\n     * @see https://sandbox.vnpayment.vn/apis/docs/thanh-toan-pay/pay.html#code-returnurl\n     */\n    public verifyReturnUrl<LoggerFields extends keyof VerifyReturnUrlLogger>(\n        query: ReturnQueryFromVNPay,\n        options?: VerifyReturnUrlOptions<LoggerFields>,\n    ): VerifyReturnUrl {\n        return this.verificationService.verifyReturnUrl(query, options);\n    }\n\n    /**\n     * Phương thức xác thực tính đúng đắn của lời gọi ipn từ VNPay\n     *\n     * Sau khi nhận được lời gọi, hệ thống merchant cần xác thực dữ liệu nhận được từ VNPay,\n     * kiểm tra đơn hàng có hợp lệ không, kiểm tra số tiền thanh toán có đúng không.\n     *\n     * Sau đó phản hồi lại VNPay kết quả xác thực thông qua các `IpnResponse`\n     *\n     * @en Method to verify the ipn call from VNPay\n     *\n     * After receiving the call, the merchant system needs to verify the data received from VNPay,\n     * check if the order is valid, check if the payment amount is correct.\n     *\n     * Then respond to VNPay the verification result through `IpnResponse`\n     *\n     * @param {ReturnQueryFromVNPay} query - Đối tượng dữ liệu từ VNPay qua IPN\n     * @en @param {ReturnQueryFromVNPay} query - The object of data from VNPay via IPN\n     *\n     * @param {VerifyIpnCallOptions<LoggerFields>} options - Tùy chọn để xác thực\n     * @en @param {VerifyIpnCallOptions<LoggerFields>} options - Options for verification\n     *\n     * @returns {VerifyIpnCall} Kết quả xác thực\n     * @en @returns {VerifyIpnCall} Verification result\n     * @see https://sandbox.vnpayment.vn/apis/docs/thanh-toan-pay/pay.html#code-ipn-url\n     */\n    public verifyIpnCall<LoggerFields extends keyof VerifyIpnCallLogger>(\n        query: ReturnQueryFromVNPay,\n        options?: VerifyIpnCallOptions<LoggerFields>,\n    ): VerifyIpnCall {\n        return this.verificationService.verifyIpnCall(query, options);\n    }\n\n    /**\n     * Đây là API để hệ thống merchant truy vấn kết quả thanh toán của giao dịch tại hệ thống VNPAY.\n     * @en This is the API for the merchant system to query the payment result of the transaction at the VNPAY system.\n     *\n     * @param {QueryDr} query - Dữ liệu truy vấn kết quả thanh toán\n     * @en @param {QueryDr} query - The data to query payment result\n     *\n     * @param {QueryDrResponseOptions<LoggerFields>} options - Tùy chọn truy vấn\n     * @en @param {QueryDrResponseOptions<LoggerFields>} options - Query options\n     *\n     * @returns {Promise<QueryDrResponse>} Kết quả truy vấn từ VNPay sau khi đã xác thực\n     * @en @returns {Promise<QueryDrResponse>} Query result from VNPay after verification\n     * @see https://sandbox.vnpayment.vn/apis/docs/truy-van-hoan-tien/querydr&refund.html#truy-van-ket-qua-thanh-toan-PAY\n     */\n    public async queryDr<LoggerFields extends keyof QueryDrResponseLogger>(\n        query: QueryDr,\n        options?: QueryDrResponseOptions<LoggerFields>,\n    ): Promise<QueryDrResponse> {\n        return this.queryService.queryDr(query, options);\n    }\n\n    /**\n     * Đây là API để hệ thống merchant gửi yêu cầu hoàn tiền cho giao dịch qua hệ thống Cổng thanh toán VNPAY.\n     * @en This is the API for the merchant system to refund the transaction at the VNPAY system.\n     *\n     * @param {Refund} data - Dữ liệu yêu cầu hoàn tiền\n     * @en @param {Refund} data - The data to request refund\n     *\n     * @param {RefundOptions<LoggerFields>} options - Tùy chọn hoàn tiền\n     * @en @param {RefundOptions<LoggerFields>} options - Refund options\n     *\n     * @returns {Promise<RefundResponse>} Kết quả hoàn tiền từ VNPay sau khi đã xác thực\n     * @en @returns {Promise<RefundResponse>} Refund result from VNPay after verification\n     * @see https://sandbox.vnpayment.vn/apis/docs/truy-van-hoan-tien/querydr&refund.html#hoan-tien-thanh-toan-PAY\n     */\n    public async refund<LoggerFields extends keyof RefundResponseLogger>(\n        data: Refund,\n        options?: RefundOptions<LoggerFields>,\n    ): Promise<RefundResponse> {\n        return this.queryService.refund(data, options);\n    }\n}\n"]}